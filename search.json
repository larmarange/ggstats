[{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://larmarange.github.io/ggstats/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"new-positions","dir":"Articles","previous_headings":"","what":"New positions","title":"Geometries for diverging bar plots","text":"Diverging bar plots achieved using position_diverging() position_likert(). position_diverging() stacks bars top centers around zero (number categories displayed side).  position_likert() similar uses proportions instead counts.  default, number categories displayed side, .e. 4 categories, 2 displayed negatively 2 positively. odd number categories, half central category displayed negatively half positively. center changed cutoff argument, representing number categories displayed negatively: 2 display negatively two first categories, 2.5 display negatively two first categories half third, 2.2 display negatively two first categories fifth third.","code":"base <-   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   theme(legend.position = \"none\")  p_stack <-   base +   geom_bar(position = \"stack\") +   ggtitle(\"position_stack()\")  p_diverging <-   base +   geom_bar(position = \"diverging\") +   ggtitle(\"position_diverging()\")  p_stack + p_diverging p_fill <-   base +   geom_bar(position = \"fill\") +   ggtitle(\"position_fill()\")  p_likert <-   base +   geom_bar(position = \"likert\") +   ggtitle(\"position_likert()\")  p_fill + p_likert p_1 <-   base +   geom_bar(position = position_diverging(cutoff = 1)) +   ggtitle(\"cutoff = 1\")  p_2 <-   base +   geom_bar(position = position_diverging(cutoff = 2)) +   ggtitle(\"cutoff = 2\")  p_null <-   base +   geom_bar(position = position_diverging(cutoff = NULL)) +   ggtitle(\"cutoff = NULL\")  p_3.75 <-   base +   geom_bar(position = position_diverging(cutoff = 3.75)) +   ggtitle(\"cutoff = 3.75\")  p_5 <-   base +   geom_bar(position = position_diverging(cutoff = 5)) +   ggtitle(\"cutoff = 5\")  wrap_plots(p_1, p_2, p_null, p_3.75, p_5)"},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"new-scales","dir":"Articles","previous_headings":"","what":"New scales","title":"Geometries for diverging bar plots","text":"diverging bar plot, recommended use diverging palette, provided Brewer palettes. Sometimes, number available colors insufficient palette. case, use pal_extender() scale_fill_extended(). However, use custom cutoff, also important change center palette well. Therefore, diverging bar plots, recommend use scale_fill_likert().","code":"wrap_plots(   p_1 + scale_fill_likert(cutoff = 1),   p_null + scale_fill_likert(),   p_3.75 + scale_fill_likert(cutoff = 3.75) )"},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"improving-axes","dir":"Articles","previous_headings":"","what":"Improving axes","title":"Geometries for diverging bar plots","text":"may also want centered axes. easily achieved symmetric_limits(). also use label_number_abs() label_percent_abs() display absolute numbers.","code":"wrap_plots(   p_3.75,   p_3.75 +     scale_x_continuous(       limits = symmetric_limits,       labels = label_number_abs()     ) )"},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"new-geometries","dir":"Articles","previous_headings":"","what":"New geometries","title":"Geometries for diverging bar plots","text":"facilitate creation diverging bar plots, use variants geom_bar() geom_text().","code":""},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"geom_diverging-geom_diverging_text","dir":"Articles","previous_headings":"New geometries","what":"geom_diverging() & geom_diverging_text()","title":"Geometries for diverging bar plots","text":"Let’s consider following plot:  achieved quicker geom_diverging() geom_diverging_text().","code":"ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"diverging\") +   geom_text(     aes(       label =         label_number_abs(hide_below = 800)         (after_stat(count))     ),     stat = \"count\",     position = position_diverging(.5)   ) +   scale_fill_likert() +   scale_x_continuous(     labels = label_number_abs(),     limits = symmetric_limits   ) ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_diverging() +   geom_diverging_text(     aes(       label =         label_number_abs(hide_below = 800)         (after_stat(count))     )   ) +   scale_fill_likert() +   scale_x_continuous(     labels = label_number_abs(),     limits = symmetric_limits   )"},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"geom_likert-geom_likert_text","dir":"Articles","previous_headings":"New geometries","what":"geom_likert() & geom_likert_text()","title":"Geometries for diverging bar plots","text":"geom_likert() geom_likert_text() works similarly. geom_likert_text() takes advantages stat_prop() computing proportions displayed (see vignette(\"stat_prop\")).","code":"ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_likert() +   geom_likert_text() +   scale_fill_likert() +   scale_x_continuous(     labels = label_percent_abs()   )"},{"path":"https://larmarange.github.io/ggstats/articles/geom_diverging.html","id":"geom_pyramid-geom_pyramid_text","dir":"Articles","previous_headings":"New geometries","what":"geom_pyramid() & geom_pyramid_text()","title":"Geometries for diverging bar plots","text":"Finally, geom_pyramid() geom_pyramid_text() variations adapted display age-sex pyramid. uses proportions total.","code":"d <- Titanic |> as.data.frame() ggplot(d) +   aes(y = Class, fill = Sex, weight = Freq) +   geom_pyramid() +   geom_pyramid_text() +   scale_x_continuous(     labels = label_percent_abs(),     limits = symmetric_limits   )"},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"quick-coefficients-plot","dir":"Articles","previous_headings":"","what":"Quick coefficients plot","title":"Plot model coefficients with `ggcoef_model()`","text":"work automatically, function requires broom.helpers. Simply call ggcoef_model() model object. result stats::lm, stats::glm model covered broom.helpers.  case logistic regression (model coefficients usually exponentiated), simply indicated exponentiate = TRUE. Note logarithmic scale used x-axis.","code":"data(tips, package = \"reshape\") mod_simple <- lm(tip ~ day + time + total_bill, data = tips) ggcoef_model(mod_simple) d_titanic <- as.data.frame(Titanic) d_titanic$Survived <- factor(d_titanic$Survived, c(\"No\", \"Yes\")) mod_titanic <- glm(   Survived ~ Sex * Age + Class,   weights = Freq,   data = d_titanic,   family = binomial ) ggcoef_model(mod_titanic, exponentiate = TRUE)"},{"path":[]},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"variable-labels","dir":"Articles","previous_headings":"Customizing the plot","what":"Variable labels","title":"Plot model coefficients with `ggcoef_model()`","text":"can use labelled package define variable labels. automatically used ggcoef_model(). Note variable labels defined computing model.  can also define custom variable labels directly passing named vector variable_labels option.  variable labels long, can pass ggplot2::label_wrap_gen() labeller function facet_labeller.  Use facet_row = NULL hide variable names.","code":"library(labelled) tips_labelled <- tips |>   set_variable_labels(     day = \"Day of the week\",     time = \"Lunch or Dinner\",     total_bill = \"Bill's total\"   ) mod_labelled <- lm(tip ~ day + time + total_bill, data = tips_labelled) ggcoef_model(mod_labelled) ggcoef_model(   mod_simple,   variable_labels = c(     day = \"Week day\",     time = \"Time (lunch or dinner ?)\",     total_bill = \"Total of the bill\"   ) ) ggcoef_model(   mod_simple,   variable_labels = c(     day = \"Week day\",     time = \"Time (lunch or dinner ?)\",     total_bill = \"Total of the bill\"   ),   facet_labeller = ggplot2::label_wrap_gen(10) ) ggcoef_model(mod_simple, facet_row = NULL, colour_guide = TRUE)"},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"term-labels","dir":"Articles","previous_headings":"Customizing the plot","what":"Term labels","title":"Plot model coefficients with `ggcoef_model()`","text":"Several options allows customize term labels.   default, categorical variables using treatment sum contrasts, reference rows added displayed graph.  Continuous variables polynomial terms defined stats::poly() also properly managed.  Use no_reference_row indicate variables reference row added.","code":"ggcoef_model(mod_titanic, exponentiate = TRUE) ggcoef_model(   mod_titanic,   exponentiate = TRUE,   show_p_values = FALSE,   signif_stars = FALSE,   add_reference_rows = FALSE,   categorical_terms_pattern = \"{level} (ref: {reference_level})\",   interaction_sep = \" x \" ) +   ggplot2::scale_y_discrete(labels = scales::label_wrap(15)) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. mod_titanic2 <- glm(   Survived ~ Sex * Age + Class,   weights = Freq,   data = d_titanic,   family = binomial,   contrasts = list(Sex = contr.sum, Class = contr.treatment(4, base = 3)) ) ggcoef_model(mod_titanic2, exponentiate = TRUE) mod_poly <- lm(Sepal.Length ~ poly(Petal.Width, 3) + Petal.Length, data = iris) ggcoef_model(mod_poly) ggcoef_model(   mod_titanic2,   exponentiate = TRUE,   no_reference_row = \"Sex\" ) ggcoef_model(   mod_titanic2,   exponentiate = TRUE,   no_reference_row = broom.helpers::all_dichotomous() ) ggcoef_model(   mod_titanic2,   exponentiate = TRUE,   no_reference_row = broom.helpers::all_categorical(),   categorical_terms_pattern = \"{level}/{reference_level}\" )"},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"elements-to-display","dir":"Articles","previous_headings":"Customizing the plot","what":"Elements to display","title":"Plot model coefficients with `ggcoef_model()`","text":"Use intercept = TRUE display intercepts.  can remove confidence intervals conf.int = FALSE.  default, significant terms (.e. p-value 5%) highlighted using two types dots. can control level significance significance remove significance = NULL.  default, dots colored variable. can deactivate behavior colour = NULL.  can display subset terms include.  possible use tidyselect helpers.  can remove stripped rows stripped_rows = FALSE.  hesitate consult help file ggcoef_model() see available options.","code":"ggcoef_model(mod_simple, intercept = TRUE) ggcoef_model(mod_simple, conf.int = FALSE) ggcoef_model(mod_simple, significance = NULL) ggcoef_model(mod_simple, colour = NULL) ggcoef_model(mod_simple, include = c(\"time\", \"total_bill\")) ggcoef_model(mod_simple, include = dplyr::starts_with(\"t\")) ggcoef_model(mod_simple, stripped_rows = FALSE)"},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"ggplot2-elements","dir":"Articles","previous_headings":"Customizing the plot","what":"ggplot2 elements","title":"Plot model coefficients with `ggcoef_model()`","text":"plot returned ggcoef_model() classic ggplot2 plot. can therefore apply ggplot2 functions .","code":"ggcoef_model(mod_simple) +   ggplot2::xlab(\"Coefficients\") +   ggplot2::ggtitle(\"Custom title\") +   ggplot2::scale_color_brewer(palette = \"Set1\") +   ggplot2::theme(legend.position = \"right\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"forest-plot-with-a-coefficient-table","dir":"Articles","previous_headings":"","what":"Forest plot with a coefficient table","title":"Plot model coefficients with `ggcoef_model()`","text":"ggcoef_table() variant ggcoef_model() displaying coefficient table right forest plot.   can easily customize columns displayed.","code":"ggcoef_table(mod_simple) ggcoef_table(mod_titanic, exponentiate = TRUE) ggcoef_table(   mod_simple,   table_stat = c(\"label\", \"estimate\", \"std.error\", \"ci\"),   ci_pattern = \"{conf.low} to {conf.high}\",   table_stat_label = list(     estimate = scales::label_number(accuracy = .001),     conf.low = scales::label_number(accuracy = .01),     conf.high = scales::label_number(accuracy = .01),     std.error = scales::label_number(accuracy = .001),     label = toupper   ),   table_header = c(\"Term\", \"Coef.\", \"SE\", \"CI\"),   table_witdhs = c(2, 3) ) #> Warning: The `table_witdhs` argument of `ggcoef_table()` is deprecated as of ggstats #> 0.10.0. #> ℹ Please use the `table_widths` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"multinomial-models","dir":"Articles","previous_headings":"","what":"Multinomial models","title":"Plot model coefficients with `ggcoef_model()`","text":"multinomial models, simply use ggcoef_model() ggcoef_table(). Additional visualizations available using ggcoef_dodged() ggcoef_faceted().     can use group_labels customize label level.","code":"library(nnet) hec <- as.data.frame(HairEyeColor) mod <- multinom(   Hair ~ Eye + Sex,   data = hec,   weights = hec$Freq ) #> # weights:  24 (15 variable) #> initial  value 820.686262  #> iter  10 value 669.061500 #> iter  20 value 658.888977 #> final  value 658.885327  #> converged mod |> ggcoef_model(exponentiate = TRUE) mod |> ggcoef_table(exponentiate = TRUE) mod |> ggcoef_dodged(exponentiate = TRUE) mod |> ggcoef_faceted(exponentiate = TRUE) mod |>   ggcoef_faceted(     group_labels = c(\"Brown\" = \"Brown\\n(ref: Black)\"),     exponentiate = TRUE   )"},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"multi-components-models","dir":"Articles","previous_headings":"","what":"Multi-components models","title":"Plot model coefficients with `ggcoef_model()`","text":"Multi-components models zero-inflated Poisson beta regression generate set terms components. simply use ggcoef_model() ggcoef_table(). Additional visualizations available using ggcoef_dodged() ggcoef_faceted().","code":"library(pscl) #> Classes and Methods for R originally developed in the #> Political Science Computational Laboratory #> Department of Political Science #> Stanford University (2002-2015), #> by and under the direction of Simon Jackman. #> hurdle and zeroinfl functions by Achim Zeileis. data(\"bioChemists\", package = \"pscl\") mod <- zeroinfl(art ~ fem * mar | fem + mar, data = bioChemists) mod |> ggcoef_model() #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages. mod |> ggcoef_table() #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages. mod |> ggcoef_dodged(exponentiate = TRUE) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages. mod |> ggcoef_faceted(   exponentiate = TRUE,   group_labels = c(conditional = \"Count\", zero_inflated = \"Zero-inflated\") ) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages."},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"comparing-several-models","dir":"Articles","previous_headings":"","what":"Comparing several models","title":"Plot model coefficients with `ggcoef_model()`","text":"can easily compare several models ggcoef_compare(). noted, ggcoef_compare() compatible multinomial multi-components models.","code":"mod1 <- lm(Fertility ~ ., data = swiss) mod2 <- step(mod1, trace = 0) mod3 <- lm(Fertility ~ Agriculture + Education * Catholic, data = swiss) models <- list(   \"Full model\" = mod1,   \"Simplified model\" = mod2,   \"With interaction\" = mod3 )  ggcoef_compare(models) ggcoef_compare(models, type = \"faceted\")"},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"advanced-users","dir":"Articles","previous_headings":"","what":"Advanced users","title":"Plot model coefficients with `ggcoef_model()`","text":"Advanced users use dataset pass ggcoef_plot(). dataset produced ggcoef_model(), ggcoef_dodged(), ggcoef_faceted() ggcoef_compare() option return_data = TRUE using broom::tidy() broom.helpers::tidy_plus_plus().","code":""},{"path":"https://larmarange.github.io/ggstats/articles/ggcoef_model.html","id":"supported-models","dir":"Articles","previous_headings":"","what":"Supported models","title":"Plot model coefficients with `ggcoef_model()`","text":"Note: list models tested. broom.helpers, therefore ggcoef_model(), may may work properly partially types models.","code":""},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"generating-an-example-dataset","dir":"Articles","previous_headings":"","what":"Generating an example dataset","title":"Plot Likert-type items with `gglikert()`","text":"","code":"likert_levels <- c(   \"Strongly disagree\",   \"Disagree\",   \"Neither agree nor disagree\",   \"Agree\",   \"Strongly agree\" ) set.seed(42) df <-   tibble(     q1 = sample(likert_levels, 150, replace = TRUE),     q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),     q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),     q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),     q5 = sample(c(likert_levels, NA), 150, replace = TRUE),     q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))   ) |>   mutate(across(everything(), ~ factor(.x, levels = likert_levels)))  likert_levels_dk <- c(   \"Strongly disagree\",   \"Disagree\",   \"Neither agree nor disagree\",   \"Agree\",   \"Strongly agree\",   \"Don't know\" ) df_dk <-   tibble(     q1 = sample(likert_levels_dk, 150, replace = TRUE),     q2 = sample(likert_levels_dk, 150, replace = TRUE, prob = 6:1),     q3 = sample(likert_levels_dk, 150, replace = TRUE, prob = 1:6),     q4 = sample(likert_levels_dk, 150, replace = TRUE, prob = 1:6),     q5 = sample(c(likert_levels_dk, NA), 150, replace = TRUE),     q6 = sample(       likert_levels_dk, 150,       replace = TRUE, prob = c(1, 0, 1, 1, 0, 1)     )   ) |>   mutate(across(everything(), ~ factor(.x, levels = likert_levels_dk)))"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"quick-plot","dir":"Articles","previous_headings":"","what":"Quick plot","title":"Plot Likert-type items with `gglikert()`","text":"Simply call gglikert().  list variables plot (default) specify include. argument accepts tidy-select syntax.","code":"gglikert(df) gglikert(df, include = q1:q3)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"customizing-the-plot","dir":"Articles","previous_headings":"","what":"Customizing the plot","title":"Plot Likert-type items with `gglikert()`","text":"generated plot standard ggplot2 object. can therefore use ggplot2 functions custom many aspects.","code":"gglikert(df) +   ggtitle(\"A Likert-type items plot\", subtitle = \"generated with gglikert()\") +   scale_fill_brewer(palette = \"RdYlBu\") #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale."},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"sorting-the-questions","dir":"Articles","previous_headings":"Customizing the plot","what":"Sorting the questions","title":"Plot Likert-type items with `gglikert()`","text":"can sort plot sort.  default, plot sorted based proportion higher center level, .e. case proportion answers equal “Agree” “Strongly Agree”. Alternatively, questions transformed score sorted accorded mean.","code":"gglikert(df, sort = \"ascending\") gglikert(df, sort = \"ascending\", sort_method = \"mean\")"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"sorting-the-answers","dir":"Articles","previous_headings":"Customizing the plot","what":"Sorting the answers","title":"Plot Likert-type items with `gglikert()`","text":"can reverse order answers reverse_likert.","code":"gglikert(df, reverse_likert = TRUE)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"proportion-labels","dir":"Articles","previous_headings":"Customizing the plot","what":"Proportion labels","title":"Plot Likert-type items with `gglikert()`","text":"Proportion labels removed add_labels = FALSE.  customized.","code":"gglikert(df, add_labels = FALSE) gglikert(   df,   labels_size = 3,   labels_accuracy = .1,   labels_hide_below = .2,   labels_color = \"white\" )"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"totals-on-each-side","dir":"Articles","previous_headings":"Customizing the plot","what":"Totals on each side","title":"Plot Likert-type items with `gglikert()`","text":"default, totals added side plot. case uneven number answer levels, central level taken account computing totals. totals_include_center = TRUE, half proportion central level added side.  Totals customized.  removed.","code":"gglikert(   df,   totals_include_center = TRUE,   sort = \"descending\",   sort_prop_include_center = TRUE ) gglikert(   df,   totals_size = 4,   totals_color = \"blue\",   totals_fontface = \"italic\",   totals_hjust = .20 ) gglikert(df, add_totals = FALSE)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"variable-labels","dir":"Articles","previous_headings":"","what":"Variable labels","title":"Plot Likert-type items with `gglikert()`","text":"using variable labels (see labelled::set_variable_labels()), taken automatically account gglikert().  can also provide custom variable labels variable_labels.  can control variable labels wrapped y_label_wrap.","code":"if (require(labelled)) {   df <- df |>     set_variable_labels(       q1 = \"first question\",       q2 = \"second question\",       q3 = \"this is the third question with a quite long variable label\"     ) } #> Loading required package: labelled gglikert(df) gglikert(   df,   variable_labels = c(     q1 = \"alternative label for the first question\",     q6 = \"another custom label\"   ) ) gglikert(df, y_label_wrap = 20) gglikert(df, y_label_wrap = 200)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"custom-center","dir":"Articles","previous_headings":"","what":"Custom center","title":"Plot Likert-type items with `gglikert()`","text":"default, Likert plots centered, .e. displaying number categories side graph. number categories odd, half “central” category displayed negatively half positively. possible control center graph, using cutoff argument, representing number categories displayed negatively: 2 display two first categories negatively others positively; 2.25 display two first categories quarter third negatively.","code":"gglikert(df, cutoff = 0) gglikert(df, cutoff = 1) gglikert(df, cutoff = 1.25) gglikert(df, cutoff = 1.75) gglikert(df, cutoff = 2) gglikert(df, cutoff = NULL) gglikert(df, cutoff = 4) gglikert(df, cutoff = 5)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"symmetric-x-axis","dir":"Articles","previous_headings":"","what":"Symmetric x-axis","title":"Plot Likert-type items with `gglikert()`","text":"Simply specify symmetric = TRUE.","code":"gglikert(df, cutoff = 1) gglikert(df, cutoff = 1, symmetric = TRUE)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"removing-certain-values","dir":"Articles","previous_headings":"","what":"Removing certain values","title":"Plot Likert-type items with `gglikert()`","text":"Sometimes, dataset contain certain values displayed.  first option convert don’t knows NA. case, proportions computed non missing.  , use exclude_fill_values display specific values, still counting denominator computing proportions.","code":"gglikert(df_dk) df_dk |>   mutate(across(everything(), ~ factor(.x, levels = likert_levels))) |>   gglikert() df_dk |> gglikert(exclude_fill_values = \"Don't know\")"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"facets","dir":"Articles","previous_headings":"","what":"Facets","title":"Plot Likert-type items with `gglikert()`","text":"define facets, use facet_rows /facet_cols.    compare answers subgroup, can alternatively map .question facets, define grouping variable y.","code":"df_group <- df df_group$group1 <- sample(c(\"A\", \"B\"), 150, replace = TRUE) df_group$group2 <- sample(c(\"a\", \"b\", \"c\"), 150, replace = TRUE)  gglikert(df_group,   q1:q6,   facet_cols = vars(group1),   labels_size = 3 ) gglikert(df_group,   q1:q2,   facet_rows = vars(group1, group2),   labels_size = 3 ) gglikert(df_group,   q3:q6,   facet_cols = vars(group1),   facet_rows = vars(group2),   labels_size = 3 ) +   scale_x_continuous(     labels = label_percent_abs(),     expand = expansion(0, .2)   ) gglikert(df_group,   q1:q4,   y = \"group1\",   facet_rows = vars(.question),   labels_size = 3,   facet_label_wrap = 15 )"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"stacked-plot","dir":"Articles","previous_headings":"","what":"Stacked plot","title":"Plot Likert-type items with `gglikert()`","text":"classical stacked bar plot, can use gglikert_stacked().","code":"gglikert_stacked(df) gglikert_stacked(   df,   sort = \"asc\",   add_median_line = TRUE,   add_labels = FALSE ) gglikert_stacked(   df_group,   include = q1:q4,   y = \"group2\" ) +   facet_grid(     rows = vars(.question),     labeller = label_wrap_gen(15)   )"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"long-format-dataset","dir":"Articles","previous_headings":"","what":"Long format dataset","title":"Plot Likert-type items with `gglikert()`","text":"Internally, gglikert() calling gglikert_data() generate long format dataset combining questions two columns, .question .answer. dataset useful types plot, example classic stacked bar plot.","code":"gglikert_data(df) |>   head() #> # A tibble: 6 × 3 #>   .weights .question                                                   .answer   #>      <dbl> <fct>                                                       <fct>     #> 1        1 first question                                              Strongly… #> 2        1 second question                                             Disagree  #> 3        1 this is the third question with a quite long variable label Agree     #> 4        1 q4                                                          Disagree  #> 5        1 q5                                                          Strongly… #> 6        1 q6                                                          Strongly… ggplot(gglikert_data(df)) +   aes(y = .question, fill = .answer) +   geom_bar(position = \"fill\")"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"weighted-data","dir":"Articles","previous_headings":"","what":"Weighted data","title":"Plot Likert-type items with `gglikert()`","text":"gglikert(), gglikert_stacked() gglikert_data() accepts weights argument, allowing specify statistical weights.","code":"df$sampling_weights <- runif(nrow(df)) gglikert(df, q1:q4, weights = sampling_weights)"},{"path":"https://larmarange.github.io/ggstats/articles/gglikert.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See also","title":"Plot Likert-type items with `gglikert()`","text":"function position_likert() used center bars.","code":""},{"path":"https://larmarange.github.io/ggstats/articles/stat_prop.html","id":"adding-labels-on-a-percent-stacked-bar-plot","dir":"Articles","previous_headings":"","what":"Adding labels on a percent stacked bar plot","title":"Compute custom proportions with `stat_prop()`","text":"using position = \"fill\" geom_bar(), can produce percent stacked bar plot. However, proportions corresponding y axis directly accessible using ggplot2. stat_prop(), can easily add plot. following example, indicated stat = \"prop\" ggplot2::geom_text() use stat_prop(), defined aesthetic (want compute proportions separately value x), also used ggplot2::position_fill() calling ggplot2::geom_text().  Note stat_prop() properly taken account weight aesthetic. stat_prop() also compatible faceting. case, proportions computed separately facet.","code":"d <- as.data.frame(Titanic) p <- ggplot(d) +   aes(x = Class, fill = Survived, weight = Freq, by = Class) +   geom_bar(position = \"fill\") +   geom_text(stat = \"prop\", position = position_fill(.5)) p p + facet_grid(cols = vars(Sex))"},{"path":"https://larmarange.github.io/ggstats/articles/stat_prop.html","id":"displaying-proportions-of-the-total","dir":"Articles","previous_headings":"","what":"Displaying proportions of the total","title":"Compute custom proportions with `stat_prop()`","text":"want display proportions total, simply map aesthetic 1. example using stacked bar chart.","code":"ggplot(d) +   aes(x = Class, fill = Survived, weight = Freq, by = 1) +   geom_bar() +   geom_text(     aes(label = scales::percent(after_stat(prop), accuracy = 1)),     stat = \"prop\",     position = position_stack(.5)   )"},{"path":"https://larmarange.github.io/ggstats/articles/stat_prop.html","id":"a-dodged-bar-plot-to-compare-two-distributions","dir":"Articles","previous_headings":"","what":"A dodged bar plot to compare two distributions","title":"Compute custom proportions with `stat_prop()`","text":"dodged bar plot used compare two distributions.  previous graph, difficult see first class - -represented among women, due fact much men boat. stat_prop() used adjust graph displaying instead proportion within category (.e. proportion sex).  example labels:","code":"ggplot(d) +   aes(x = Class, fill = Sex, weight = Freq, by = Sex) +   geom_bar(position = \"dodge\") ggplot(d) +   aes(x = Class, fill = Sex, weight = Freq, by = Sex, y = after_stat(prop)) +   geom_bar(stat = \"prop\", position = \"dodge\") +   scale_y_continuous(labels = scales::percent) ggplot(d) +   aes(x = Class, fill = Sex, weight = Freq, by = Sex, y = after_stat(prop)) +   geom_bar(stat = \"prop\", position = \"dodge\") +   scale_y_continuous(labels = scales::percent) +   geom_text(     mapping = aes(       label = scales::percent(after_stat(prop), accuracy = .1),       y = after_stat(0.01)     ),     vjust = \"bottom\",     position = position_dodge(.9),     stat = \"prop\"   )"},{"path":"https://larmarange.github.io/ggstats/articles/stat_prop.html","id":"displaying-unobserved-levels","dir":"Articles","previous_headings":"","what":"Displaying unobserved levels","title":"Compute custom proportions with `stat_prop()`","text":"complete argument, possible indicate aesthetic statistics completed unobserved values.  Adding complete = \"fill\" generate “0.0%” labels relevant.","code":"d <- diamonds |>   dplyr::filter(!(cut == \"Ideal\" & clarity == \"I1\")) |>   dplyr::filter(!(cut == \"Very Good\" & clarity == \"VS2\")) |>   dplyr::filter(!(cut == \"Premium\" & clarity == \"IF\")) p <- ggplot(d) +   aes(x = clarity, fill = cut, by = clarity) +   geom_bar(position = \"fill\") p +   geom_text(     stat = \"prop\",     position = position_fill(.5)   ) p +   geom_text(     stat = \"prop\",     position = position_fill(.5),     complete = \"fill\"   )"},{"path":"https://larmarange.github.io/ggstats/articles/stat_prop.html","id":"using-geom_prop_bar-and-geom_prop_text","dir":"Articles","previous_headings":"","what":"Using geom_prop_bar() and geom_prop_text()","title":"Compute custom proportions with `stat_prop()`","text":"dedicated geometries geom_prop_bar() geom_prop_text() used quick easy proportional bar plots. use default stat_prop() relevant default values. example, proportions computed x y aesthetic specified. allows generate quick proportional bar plot.  can specify aesthetic. example, reproduce comparison two distributions presented earlier.  can also display counts instead proportions.","code":"ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_prop_bar() +   geom_prop_text() d <- as.data.frame(Titanic) ggplot(d) +   aes(x = Class, fill = Sex, weight = Freq, by = Sex) +   geom_prop_bar(position = \"dodge\") +   geom_prop_text(     position = position_dodge(width = .9),     vjust = - 0.5   ) +   scale_y_continuous(labels = scales::percent) ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_prop_bar(height = \"count\") +   geom_prop_text(     height = \"count\",     labels = \"count\",     labeller = scales::number   ) #> Warning in ggplot2::geom_bar(mapping = mapping, data = data, position = #> position, : Ignoring unknown parameters: `height` #> Warning in ggplot2::geom_text(mapping = mapping, data = data, position = #> position, : Ignoring unknown parameters: `height`, `labels`, and #> `labeller`"},{"path":"https://larmarange.github.io/ggstats/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Larmarange. Author, maintainer.","code":""},{"path":"https://larmarange.github.io/ggstats/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larmarange J (2025). ggstats: Extension 'ggplot2' Plotting Stats. R package version 0.10.0, https://larmarange.github.io/ggstats/.","code":"@Manual{,   title = {ggstats: Extension to 'ggplot2' for Plotting Stats},   author = {Joseph Larmarange},   year = {2025},   note = {R package version 0.10.0},   url = {https://larmarange.github.io/ggstats/}, }"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"ggstats-extension-to-ggplot2-for-plotting-stats","dir":"","previous_headings":"","what":"Extension to ggplot2 for Plotting Stats","title":"Extension to ggplot2 for Plotting Stats","text":"ggstats package provides new statistics, new geometries new positions ggplot2 suite functions facilitate creation statistical plots.","code":""},{"path":"https://larmarange.github.io/ggstats/index.html","id":"installation--documentation","dir":"","previous_headings":"","what":"Installation & Documentation","title":"Extension to ggplot2 for Plotting Stats","text":"install stable version: Documentation stable version: https://larmarange.github.io/ggstats/ install development version: Documentation development version: https://larmarange.github.io/ggstats/dev/","code":"install.packages(\"ggstats\") remotes::install_github(\"larmarange/ggstats\")"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"plot-model-coefficients","dir":"","previous_headings":"","what":"Plot model coefficients","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"library(ggstats)  mod1 <- lm(Fertility ~ ., data = swiss) ggcoef_model(mod1) ggcoef_table(mod1)"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"comparing-several-models","dir":"","previous_headings":"","what":"Comparing several models","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"mod2 <- step(mod1, trace = 0) mod3 <- lm(Fertility ~ Agriculture + Education * Catholic, data = swiss) models <- list(   \"Full model\" = mod1,   \"Simplified model\" = mod2,   \"With interaction\" = mod3 )  ggcoef_compare(models, type = \"faceted\")"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"compute-custom-proportions","dir":"","previous_headings":"","what":"Compute custom proportions","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"library(ggplot2) ggplot(as.data.frame(Titanic)) +   aes(x = Class, fill = Survived, weight = Freq, by = Class) +   geom_bar(position = \"fill\") +   geom_text(stat = \"prop\", position = position_fill(.5)) +   facet_grid(~Sex)"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"compute-weighted-mean","dir":"","previous_headings":"","what":"Compute weighted mean","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"data(tips, package = \"reshape\") ggplot(tips) +   aes(x = day, y = total_bill, fill = sex) +   stat_weighted_mean(geom = \"bar\", position = \"dodge\") +   ylab(\"Mean total bill per day and sex\")"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"compute-cross-tabulation-statistics","dir":"","previous_headings":"","what":"Compute cross-tabulation statistics","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"ggplot(as.data.frame(Titanic)) +   aes(     x = Class, y = Survived, weight = Freq,     size = after_stat(observed), fill = after_stat(std.resid)   ) +   stat_cross(shape = 22) +   scale_fill_steps2(breaks = c(-3, -2, 2, 3), show.limits = TRUE) +   scale_size_area(max_size = 20)"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"plot-survey-objects-taking-into-account-weights","dir":"","previous_headings":"","what":"Plot survey objects taking into account weights","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"library(survey, quietly = TRUE) #>  #> Attachement du package : 'survey' #> L'objet suivant est masqué depuis 'package:graphics': #>  #>     dotchart dw <- svydesign(   ids = ~1,   weights = ~Freq,   data = as.data.frame(Titanic) ) ggsurvey(dw) +   aes(x = Class, fill = Survived) +   geom_bar(position = \"fill\") +   ylab(\"Weighted proportion of survivors\")"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"plot-likert-type-items","dir":"","previous_headings":"","what":"Plot Likert-type items","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"library(dplyr) #>  #> Attachement du package : 'dplyr' #> Les objets suivants sont masqués depuis 'package:stats': #>  #>     filter, lag #> Les objets suivants sont masqués depuis 'package:base': #>  #>     intersect, setdiff, setequal, union likert_levels <- c(   \"Strongly disagree\",   \"Disagree\",   \"Neither agree nor disagree\",   \"Agree\",   \"Strongly agree\" ) set.seed(42) df <-   tibble(     q1 = sample(likert_levels, 150, replace = TRUE),     q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),     q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),     q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),     q5 = sample(c(likert_levels, NA), 150, replace = TRUE),     q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))   ) |>   mutate(across(everything(), ~ factor(.x, levels = likert_levels)))  gglikert(df)"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"connect-bars","dir":"","previous_headings":"","what":"Connect bars","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_bar(width = .5) +   geom_bar_connector(width = .5, linewidth = .25) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://larmarange.github.io/ggstats/index.html","id":"generate-a-cascade-plot","dir":"","previous_headings":"","what":"Generate a cascade plot","title":"Extension to ggplot2 for Plotting Stats","text":"","code":"diamonds |>   ggcascade(     all = TRUE,     big = carat > .5,     \"big & ideal\" = carat > .5 & cut == \"Ideal\"   )"},{"path":"https://larmarange.github.io/ggstats/reference/augment_chisq_add_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","title":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","text":"Augment chi-squared test compute phi coefficients","code":""},{"path":"https://larmarange.github.io/ggstats/reference/augment_chisq_add_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","text":"","code":"augment_chisq_add_phi(x)"},{"path":"https://larmarange.github.io/ggstats/reference/augment_chisq_add_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","text":"x chi-squared test returned stats::chisq.test()","code":""},{"path":"https://larmarange.github.io/ggstats/reference/augment_chisq_add_phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","text":"tibble.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/augment_chisq_add_phi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","text":"Phi coefficients measurement degree association two binary variables. value -1.0 -0.7 indicates strong negative association. value -0.7 -0.3 indicates weak negative association. value -0.3 +0.3 indicates little association. value +0.3 +0.7 indicates weak positive association. value +0.7 +1.0 indicates strong positive association.","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/augment_chisq_add_phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment a chi-squared test and compute phi coefficients — augment_chisq_add_phi","text":"","code":"tab <- xtabs(Freq ~ Sex + Class, data = as.data.frame(Titanic)) augment_chisq_add_phi(chisq.test(tab)) #> # A tibble: 8 × 13 #>   Sex    Class .observed  .prop .row.prop .col.prop .expected .resid .std.resid #>   <fct>  <fct>     <dbl>  <dbl>     <dbl>     <dbl>     <dbl>  <dbl>      <dbl> #> 1 Male   1st         180 0.0818    0.104     0.554      256.   -4.73     -11.1  #> 2 Female 1st         145 0.0659    0.309     0.446       69.4   9.07      11.1  #> 3 Male   2nd         179 0.0813    0.103     0.628      224.   -3.02      -6.99 #> 4 Female 2nd         106 0.0482    0.226     0.372       60.9   5.79       6.99 #> 5 Male   3rd         510 0.232     0.295     0.722      555.   -1.92      -5.04 #> 6 Female 3rd         196 0.0891    0.417     0.278      151.    3.68       5.04 #> 7 Male   Crew        862 0.392     0.498     0.974      696.    6.29      17.6  #> 8 Female Crew         23 0.0104    0.0489    0.0260     189.  -12.1      -17.6  #> # ℹ 4 more variables: .row.observed <dbl>, .col.observed <dbl>, #> #   .total.observed <dbl>, .phi <dbl>"},{"path":"https://larmarange.github.io/ggstats/reference/geom_connector.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect bars / points — geom_connector","title":"Connect bars / points — geom_connector","text":"geom_connector() variation ggplot2::geom_step(). variant geom_bar_connector() particularly adapted connect bars.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_connector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect bars / points — geom_connector","text":"","code":"geom_connector(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   width = 0.1,   continuous = FALSE,   na.rm = FALSE,   orientation = NA,   show.legend = NA,   inherit.aes = TRUE,   ... )  geom_bar_connector(   mapping = NULL,   data = NULL,   stat = \"prop\",   position = \"stack\",   width = 0.9,   continuous = FALSE,   add_baseline = TRUE,   na.rm = FALSE,   orientation = NA,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://larmarange.github.io/ggstats/reference/geom_connector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect bars / points — geom_connector","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. width Bar width (see examples). continuous connect segments continuous? na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. add_baseline Add connectors baseline?","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_connector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect bars / points — geom_connector","text":"","code":"library(ggplot2)  # geom_bar_connector() -----------  ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_bar(width = .5) +   geom_bar_connector(width = .5, linewidth = .25) +   theme_minimal() +   theme(legend.position = \"bottom\")   # \\donttest{ ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_bar(width = .5) +   geom_bar_connector(     width = .5,     continuous = TRUE,     colour = \"red\",     linetype = \"dotted\",     add_baseline = FALSE,    ) +   theme(legend.position = \"bottom\")   ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_bar(width = .5, position = \"fill\") +   geom_bar_connector(width = .5, position = \"fill\") +   theme(legend.position = \"bottom\")   ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_bar(width = .5, position = \"diverging\") +   geom_bar_connector(width = .5, position = \"diverging\", linewidth = .25) +   theme(legend.position = \"bottom\")   # geom_connector() -----------  ggplot(mtcars) + aes(x = wt, y = mpg, colour = factor(cyl)) +   geom_connector() +   geom_point()   ggplot(mtcars) +   aes(x = wt, y = mpg, colour = factor(cyl)) +   geom_connector(continuous = TRUE) +   geom_point()   ggplot(mtcars) +   aes(x = wt, y = mpg, colour = factor(cyl)) +   geom_connector(continuous = TRUE, width = .3) +   geom_point()   ggplot(mtcars) +   aes(x = wt, y = mpg, colour = factor(cyl)) +   geom_connector(width = 0) +   geom_point()   ggplot(mtcars) +   aes(x = wt, y = mpg, colour = factor(cyl)) +   geom_connector(width = Inf) +   geom_point()   ggplot(mtcars) +   aes(x = wt, y = mpg, colour = factor(cyl)) +   geom_connector(width = Inf, continuous = TRUE) +   geom_point()  # }"},{"path":"https://larmarange.github.io/ggstats/reference/geom_diverging.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometries for diverging bar plots — geom_diverging","title":"Geometries for diverging bar plots — geom_diverging","text":"geometries variations ggplot2::geom_bar() ggplot2::geom_text() provides different set default values.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_diverging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometries for diverging bar plots — geom_diverging","text":"","code":"geom_diverging(   mapping = NULL,   data = NULL,   position = \"diverging\",   ...,   complete = \"fill\",   default_by = \"total\" )  geom_likert(   mapping = NULL,   data = NULL,   position = \"likert\",   ...,   complete = \"fill\",   default_by = \"x\" )  geom_pyramid(   mapping = NULL,   data = NULL,   position = \"diverging\",   ...,   complete = NULL,   default_by = \"total\" )  geom_diverging_text(   mapping = ggplot2::aes(!!!auto_contrast),   data = NULL,   position = position_diverging(0.5),   ...,   complete = \"fill\",   default_by = \"total\" )  geom_likert_text(   mapping = ggplot2::aes(!!!auto_contrast),   data = NULL,   position = position_likert(0.5),   ...,   complete = \"fill\",   default_by = \"x\" )  geom_pyramid_text(   mapping = ggplot2::aes(!!!auto_contrast),   data = NULL,   position = position_diverging(0.5),   ...,   complete = NULL,   default_by = \"total\" )"},{"path":"https://larmarange.github.io/ggstats/reference/geom_diverging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometries for diverging bar plots — geom_diverging","text":"mapping Optional set aesthetic mappings. data data displayed layers. position position adjustment use data layer. ... arguments passed ggplot2::geom_bar() complete aesthetic unobserved values completed, see stat_prop(). default_by Name aesthetic determining denominators default, see stat_prop().","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_diverging.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometries for diverging bar plots — geom_diverging","text":"geom_diverging() designed stacked diverging bar plots, using position_diverging(). geom_likert() designed Likert-type items. Using position_likert() (bar sums 100%). geom_pyramid() similar geom_diverging() uses proportions total instead counts. add labels bar plots, simply use geom_diverging_text(), geom_likert_text(), geom_pyramid_text(). geometries relies stat_prop().","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_diverging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometries for diverging bar plots — geom_diverging","text":"","code":"library(ggplot2) ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_diverging()   ggplot(diamonds) +   aes(x = clarity, fill = cut) +   geom_diverging(position = position_diverging(cutoff = 4))   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_likert() +   geom_likert_text()   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_likert() +   geom_likert_text(     aes(       label = label_percent_abs(accuracy = 1, hide_below = .10)(         after_stat(prop)       ),       colour = after_scale(hex_bw(.data$fill))     )   )   d <- Titanic |> as.data.frame()  ggplot(d) +   aes(y = Class, fill = Sex, weight = Freq) +   geom_diverging() +   geom_diverging_text()   ggplot(d) +   aes(y = Class, fill = Sex, weight = Freq) +   geom_pyramid() +   geom_pyramid_text()"},{"path":"https://larmarange.github.io/ggstats/reference/geom_prop_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenient geometries for proportion bar plots — geom_prop_bar","title":"Convenient geometries for proportion bar plots — geom_prop_bar","text":"geom_prop_bar(), geom_prop_text() geom_prop_connector() variations ggplot2::geom_bar(), ggplot2::geom_text() geom_bar_connector() using stat_prop(), custom default aesthetics: after_stat(prop) x y, scales::percent(after_stat(prop)) label.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_prop_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenient geometries for proportion bar plots — geom_prop_bar","text":"","code":"geom_prop_bar(   mapping = NULL,   data = NULL,   position = \"stack\",   ...,   width = 0.9,   complete = NULL,   default_by = \"x\" )  geom_prop_text(   mapping = ggplot2::aes(!!!auto_contrast),   data = NULL,   position = ggplot2::position_stack(0.5),   ...,   complete = NULL,   default_by = \"x\" )  geom_prop_connector(   mapping = NULL,   data = NULL,   position = \"stack\",   ...,   width = 0.9,   complete = \"fill\",   default_by = \"x\" )"},{"path":"https://larmarange.github.io/ggstats/reference/geom_prop_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenient geometries for proportion bar plots — geom_prop_bar","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... Additional parameters passed ggplot2::geom_bar(), ggplot2::geom_text() geom_bar_connector(). width Bar width (0.9 default). complete Name (character) aesthetic statistics completed unobserved values (see example). default_by aesthetic available, name another aesthetic used determine denominators (e.g. \"fill\"), NULL \"total\" compute proportions total. noted, default_by = \"x\" works vertical horizontal bars.","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/geom_prop_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenient geometries for proportion bar plots — geom_prop_bar","text":"","code":"library(ggplot2) d <- as.data.frame(Titanic) ggplot(d) +   aes(x = Class, fill = Survived, weight = Freq) +   geom_prop_bar() +   geom_prop_text() +   geom_prop_connector()   ggplot(d) +   aes(y = Class, fill = Survived, weight = Freq) +   geom_prop_bar(width = .5) +   geom_prop_text() +   geom_prop_connector(width = .5, linetype = \"dotted\")   ggplot(d) +   aes(     x = Class,     fill = Survived,     weight = Freq,     y = after_stat(count),     label = after_stat(count)   ) +   geom_prop_bar() +   geom_prop_text() +   geom_prop_connector()"},{"path":"https://larmarange.github.io/ggstats/reference/geom_stripped_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternating Background Color — geom_stripped_rows","title":"Alternating Background Color — geom_stripped_rows","text":"Add alternating background color along y-axis. geom takes default aesthetics odd even receive color codes.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_stripped_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternating Background Color — geom_stripped_rows","text":"","code":"geom_stripped_rows(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   show.legend = NA,   inherit.aes = TRUE,   xfrom = -Inf,   xto = Inf,   width = 1,   nudge_y = 0 )  geom_stripped_cols(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   show.legend = NA,   inherit.aes = TRUE,   yfrom = -Inf,   yto = Inf,   width = 1,   nudge_x = 0 )"},{"path":"https://larmarange.github.io/ggstats/reference/geom_stripped_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternating Background Color — geom_stripped_rows","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). xfrom, xto limitation strips along x-axis width width strips yfrom, yto limitation strips along y-axis nudge_x, nudge_y horizontal vertical adjustment nudge strips ","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_stripped_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternating Background Color — geom_stripped_rows","text":"ggplot2 plot added geometry.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/geom_stripped_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternating Background Color — geom_stripped_rows","text":"","code":"data(tips, package = \"reshape\")  library(ggplot2) p <- ggplot(tips) +   aes(x = time, y = day) +   geom_count() +   theme_light()  p  p + geom_stripped_rows()  p + geom_stripped_cols()  p + geom_stripped_rows() + geom_stripped_cols()   # \\donttest{ p <- ggplot(tips) +   aes(x = total_bill, y = day) +   geom_count() +   theme_light() p  p + geom_stripped_rows()  p + geom_stripped_rows() + scale_y_discrete(expand = expansion(0, 0.5))  p + geom_stripped_rows(xfrom = 10, xto = 35)  p + geom_stripped_rows(odd = \"blue\", even = \"yellow\")  p + geom_stripped_rows(odd = \"blue\", even = \"yellow\", alpha = .1)  p + geom_stripped_rows(odd = \"#00FF0022\", even = \"#FF000022\")   p + geom_stripped_cols()  p + geom_stripped_cols(width = 10)  p + geom_stripped_cols(width = 10, nudge_x = 5)  # }"},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/ggcascade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cascade plot — ggcascade","text":"","code":"ggcascade(   .data,   ...,   .weights = NULL,   .by = NULL,   .nrow = NULL,   .ncol = NULL,   .add_n = TRUE,   .text_size = 4,   .arrows = TRUE )  compute_cascade(.data, ..., .weights = NULL, .by = NULL)  plot_cascade(   .data,   .by = NULL,   .nrow = NULL,   .ncol = NULL,   .add_n = TRUE,   .text_size = 4,   .arrows = TRUE )"},{"path":"https://larmarange.github.io/ggstats/reference/ggcascade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cascade plot — ggcascade","text":".data data frame, data frame extension (e.g. tibble). plot_cascade(), variable displayed x-axis named \"x\" number observations named \"n\", like tibble returned compute_cascade(). ... <data-masking> Name-value pairs conditions defining different statuses plotted (see examples). .weights <tidy-select> Optional weights. select one variable. .<tidy-select> variable set variables group computation cascade, generate facets. select several variables, use dplyr::pick() (see examples). .nrow, .ncol Number rows columns, faceted plots. .add_n Display number observations? .text_size Size labels, passed ggplot2::geom_text(). .arrows Display arrows statuses?","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcascade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cascade plot — ggcascade","text":"ggplot2 plot tibble.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcascade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cascade plot — ggcascade","text":"ggcascade() calls compute_cascade() generate data set passed plot_cascade(). Use compute_cascade() plot_cascade() controls.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcascade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cascade plot — ggcascade","text":"","code":"ggplot2::diamonds |>   ggcascade(     all = TRUE,     big = carat > .5,     \"big & ideal\" = carat > .5 & cut == \"Ideal\"   )   ggplot2::mpg |>   ggcascade(     all = TRUE,     recent = year > 2000,     \"recent & economic\" = year > 2000 & displ < 3,     .by = cyl,     .ncol = 3,     .arrows = FALSE,     .text_size = 3   )   ggplot2::mpg |>   ggcascade(     all = TRUE,     recent = year > 2000,     \"recent & economic\" = year > 2000 & displ < 3,     .by = pick(cyl, drv),     .add_n = FALSE,     .text_size = 2   )"},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model coefficients — ggcoef_model","title":"Plot model coefficients — ggcoef_model","text":"ggcoef_model(), ggcoef_table(), ggcoef_dodged(), ggcoef_faceted() ggcoef_compare() use broom.helpers::tidy_plus_plus() obtain tibble model coefficients, apply additional data transformation pass produced tibble ggcoef_plot() generate plot.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model coefficients — ggcoef_model","text":"","code":"ggcoef_model(   model,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   group_by = broom.helpers::auto_group_by(),   group_labels = NULL,   add_pairwise_contrasts = FALSE,   pairwise_variables = broom.helpers::all_categorical(),   keep_model_terms = FALSE,   pairwise_reverse = TRUE,   emmeans_args = list(),   significance = 1 - conf.level,   significance_labels = NULL,   show_p_values = TRUE,   signif_stars = TRUE,   return_data = FALSE,   ... )  ggcoef_table(   model,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   group_by = broom.helpers::auto_group_by(),   group_labels = NULL,   add_pairwise_contrasts = FALSE,   pairwise_variables = broom.helpers::all_categorical(),   keep_model_terms = FALSE,   pairwise_reverse = TRUE,   emmeans_args = list(),   significance = 1 - conf.level,   significance_labels = NULL,   show_p_values = FALSE,   signif_stars = FALSE,   table_stat = c(\"estimate\", \"ci\", \"p.value\"),   table_header = NULL,   table_text_size = 3,   table_stat_label = NULL,   ci_pattern = \"{conf.low}, {conf.high}\",   table_widths = c(3, 2),   table_witdhs = deprecated(),   ... )  ggcoef_dodged(   model,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   group_by = broom.helpers::auto_group_by(),   group_labels = NULL,   significance = 1 - conf.level,   significance_labels = NULL,   return_data = FALSE,   ... )  ggcoef_faceted(   model,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   group_by = broom.helpers::auto_group_by(),   group_labels = NULL,   significance = 1 - conf.level,   significance_labels = NULL,   return_data = FALSE,   ... )  ggcoef_compare(   models,   type = c(\"dodged\", \"faceted\"),   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   add_pairwise_contrasts = FALSE,   pairwise_variables = broom.helpers::all_categorical(),   keep_model_terms = FALSE,   pairwise_reverse = TRUE,   emmeans_args = list(),   significance = 1 - conf.level,   significance_labels = NULL,   return_data = FALSE,   ... )  ggcoef_plot(   data,   x = \"estimate\",   y = \"label\",   exponentiate = FALSE,   y_labeller = NULL,   point_size = 2,   point_stroke = 2,   point_fill = \"white\",   colour = NULL,   colour_guide = TRUE,   colour_lab = \"\",   colour_labels = ggplot2::waiver(),   shape = \"significance\",   shape_values = c(16, 21),   shape_guide = TRUE,   shape_lab = \"\",   errorbar = TRUE,   errorbar_height = 0.1,   errorbar_coloured = FALSE,   stripped_rows = TRUE,   strips_odd = \"#11111111\",   strips_even = \"#00000000\",   vline = TRUE,   vline_colour = \"grey50\",   dodged = FALSE,   dodged_width = 0.8,   facet_row = \"var_label\",   facet_col = NULL,   facet_labeller = \"label_value\",   plot_title = NULL )"},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model coefficients — ggcoef_model","text":"model regression model object tidy_fun (function) Option specify custom tidier function. tidy_args Additional arguments passed broom.helpers::tidy_plus_plus() tidy_fun conf.int (logical) confidence intervals computed? (see broom::tidy()) conf.level confidence level use confidence interval conf.int = TRUE; must strictly greater 0 less 1; defaults 0.95, corresponds 95 percent confidence interval exponentiate TRUE logarithmic scale used x-axis variable_labels (formula-list-selector) named list named vector custom variable labels. term_labels (list vector) named list named vector custom term labels. interaction_sep (string) Separator interaction terms. categorical_terms_pattern (glue pattern) glue pattern labels categorical terms treatment sum contrasts (see model_list_terms_levels()). add_reference_rows (logical) reference rows added? no_reference_row (tidy-select) Variables reference row added, add_reference_rows = TRUE. intercept (logical) intercept(s) included? include (tidy-select) Variables include. Default everything(). See also all_continuous(), all_categorical(), all_dichotomous() all_interaction(). group_by (tidy-select) One several variables group . Default auto_group_by(). Use NULL force ungrouping. group_labels (string) optional named vector custom term labels. add_pairwise_contrasts (logical) Apply tidy_add_pairwise_contrasts()? pairwise_variables (tidy-select) Variables add pairwise contrasts. keep_model_terms (logical) Keep original model terms variables pairwise contrasts added? (default FALSE) pairwise_reverse (logical) Determines whether use \"pairwise\" (TRUE) \"revpairwise\" (FALSE), see emmeans::contrast(). emmeans_args (list) List additional parameter pass emmeans::emmeans() computing pairwise contrasts. significance level (0 1) coefficient consider significantly different 0 (1 exponentiate = TRUE), NULL highlighting coefficients significance_labels optional vector custom labels significance variable show_p_values TRUE, add p-value labels signif_stars TRUE, add significant stars labels return_data TRUE, return data.frame used plotting instead plot ... parameters passed ggcoef_plot() table_stat statistics display table, use column name returned tidier \"ci\" confidence intervals formatted according ci_pattern table_header optional custom headers table table_text_size text size table table_stat_label optional named list labeller functions displayed statistic (see examples) ci_pattern glue pattern confidence intervals table table_widths relative widths forest plot coefficients table table_witdhs use table_widths instead models named list models type dodged plot, faceted plot multiple table plots? data data frame containing data plotted, typically output ggcoef_model(), ggcoef_compare() ggcoef_multinom() option return_data = TRUE x, y variables mapped x y axis y_labeller optional function applied y labels (see examples) point_size size points point_stroke thickness points point_fill fill colour points colour optional variable name mapped colour aesthetic colour_guide colour guide displayed legend? colour_lab label colour aesthetic legend colour_labels labels argument passed ggplot2::scale_colour_discrete() ggplot2::discrete_scale() shape optional variable name mapped shape aesthetic shape_values values different shapes use ggplot2::scale_shape_manual() shape_guide shape guide displayed legend? shape_lab label shape aesthetic legend errorbar error bars plotted? errorbar_height height error bars errorbar_coloured error bars colored points? stripped_rows stripped rows displayed background? strips_odd color odd rows strips_even color even rows vline vertical line drawn 0 (1 exponentiate = TRUE)? vline_colour colour vertical line dodged points dodged (according colour aesthetic)? dodged_width width value ggplot2::position_dodge() facet_row variable name used row facets facet_col optional variable name used column facets facet_labeller labeller function used labeling facets; labels long, can use ggplot2::label_wrap_gen() (see examples), information documentation ggplot2::facet_grid() plot_title optional plot title","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot model coefficients — ggcoef_model","text":"ggplot2 plot tibble return_data = TRUE.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot model coefficients — ggcoef_model","text":"control, can use argument return_data = TRUE get produced tibble, apply transformation pass customized tibble ggcoef_plot().","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot model coefficients — ggcoef_model","text":"ggcoef_table(): variation ggcoef_model() adding table estimates, confidence intervals p-values ggcoef_dodged(): dodged variation ggcoef_model() multi groups models ggcoef_faceted(): faceted variation ggcoef_model() multi groups models ggcoef_compare(): designed displaying several models plot. ggcoef_plot(): plot tidy tibble coefficients","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model coefficients — ggcoef_model","text":"","code":"mod <- lm(Sepal.Length ~ Sepal.Width + Species, data = iris) ggcoef_model(mod)   ggcoef_table(mod)    # \\donttest{ ggcoef_table(mod, table_stat = c(\"estimate\", \"ci\"))   ggcoef_table(   mod,   table_stat_label = list(     estimate = scales::label_number(.001)   ) )   ggcoef_table(mod, table_text_size = 5, table_widths = c(1, 1))   # a logistic regression example d_titanic <- as.data.frame(Titanic) d_titanic$Survived <- factor(d_titanic$Survived, c(\"No\", \"Yes\")) mod_titanic <- glm(   Survived ~ Sex * Age + Class,   weights = Freq,   data = d_titanic,   family = binomial )  # use 'exponentiate = TRUE' to get the Odds Ratio ggcoef_model(mod_titanic, exponentiate = TRUE)   ggcoef_table(mod_titanic, exponentiate = TRUE)   # display intercepts ggcoef_model(mod_titanic, exponentiate = TRUE, intercept = TRUE)   # customize terms labels ggcoef_model(   mod_titanic,   exponentiate = TRUE,   show_p_values = FALSE,   signif_stars = FALSE,   add_reference_rows = FALSE,   categorical_terms_pattern = \"{level} (ref: {reference_level})\",   interaction_sep = \" x \",   y_labeller = scales::label_wrap(15) )   # display only a subset of terms ggcoef_model(mod_titanic, exponentiate = TRUE, include = c(\"Age\", \"Class\"))   # do not change points' shape based on significance ggcoef_model(mod_titanic, exponentiate = TRUE, significance = NULL)   # a black and white version ggcoef_model(   mod_titanic,   exponentiate = TRUE,   colour = NULL, stripped_rows = FALSE )   # show dichotomous terms on one row ggcoef_model(   mod_titanic,   exponentiate = TRUE,   no_reference_row = broom.helpers::all_dichotomous(),   categorical_terms_pattern =     \"{ifelse(dichotomous, paste0(level, ' / ', reference_level), level)}\",   show_p_values = FALSE )  # }  # \\donttest{ data(tips, package = \"reshape\") mod_simple <- lm(tip ~ day + time + total_bill, data = tips) ggcoef_model(mod_simple)   # custom variable labels # you can use the labelled package to define variable labels # before computing model if (requireNamespace(\"labelled\")) {   tips_labelled <- tips |>     labelled::set_variable_labels(       day = \"Day of the week\",       time = \"Lunch or Dinner\",       total_bill = \"Bill's total\"     )   mod_labelled <- lm(tip ~ day + time + total_bill, data = tips_labelled)   ggcoef_model(mod_labelled) }   # you can provide custom variable labels with 'variable_labels' ggcoef_model(   mod_simple,   variable_labels = c(     day = \"Week day\",     time = \"Time (lunch or dinner ?)\",     total_bill = \"Total of the bill\"   ) )  # if labels are too long, you can use 'facet_labeller' to wrap them ggcoef_model(   mod_simple,   variable_labels = c(     day = \"Week day\",     time = \"Time (lunch or dinner ?)\",     total_bill = \"Total of the bill\"   ),   facet_labeller = ggplot2::label_wrap_gen(10) )   # do not display variable facets but add colour guide ggcoef_model(mod_simple, facet_row = NULL, colour_guide = TRUE)   # works also with with polynomial terms mod_poly <- lm(   tip ~ poly(total_bill, 3) + day,   data = tips, ) ggcoef_model(mod_poly)   # or with different type of contrasts # for sum contrasts, the value of the reference term is computed if (requireNamespace(\"emmeans\")) {   mod2 <- lm(     tip ~ day + time + sex,     data = tips,     contrasts = list(time = contr.sum, day = contr.treatment(4, base = 3))   )   ggcoef_model(mod2) } #> Loading required namespace: emmeans  # }  # \\donttest{ # multinomial model mod <- nnet::multinom(grade ~ stage + trt + age, data = gtsummary::trial) #> # weights:  21 (12 variable) #> initial  value 207.637723  #> iter  10 value 203.929391 #> final  value 203.897399  #> converged ggcoef_model(mod, exponentiate = TRUE)  ggcoef_table(mod, group_labels = c(II = \"Stage 2 vs. 1\"))  ggcoef_dodged(mod, exponentiate = TRUE)  ggcoef_faceted(mod, exponentiate = TRUE)  # } # \\donttest{ library(pscl) #> Classes and Methods for R originally developed in the #> Political Science Computational Laboratory #> Department of Political Science #> Stanford University (2002-2015), #> by and under the direction of Simon Jackman. #> hurdle and zeroinfl functions by Achim Zeileis. data(\"bioChemists\", package = \"pscl\") mod <- zeroinfl(art ~ fem * mar | fem + mar, data = bioChemists) ggcoef_model(mod) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages.  ggcoef_table(mod) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages.  ggcoef_dodged(mod) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages.  ggcoef_faceted(   mod,   group_labels = c(conditional = \"Count\", zero_inflated = \"Zero-inflated\") ) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages.   mod2 <- zeroinfl(art ~ fem + mar | 1, data = bioChemists) ggcoef_table(mod2) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages.  ggcoef_table(mod2, intercept = TRUE) #> ℹ <zeroinfl> model detected. #> ✔ `tidy_zeroinfl()` used instead. #> ℹ Add `tidy_fun = broom.helpers::tidy_zeroinfl` to quiet these messages.  # } # \\donttest{ # Use ggcoef_compare() for comparing several models on the same plot mod1 <- lm(Fertility ~ ., data = swiss) mod2 <- step(mod1, trace = 0) mod3 <- lm(Fertility ~ Agriculture + Education * Catholic, data = swiss) models <- list(   \"Full model\" = mod1,   \"Simplified model\" = mod2,   \"With interaction\" = mod3 )  ggcoef_compare(models)  ggcoef_compare(models, type = \"faceted\")   # you can reverse the vertical position of the point by using a negative # value for dodged_width (but it will produce some warnings) ggcoef_compare(models, dodged_width = -.9) #> Warning: `position_dodge()` requires non-overlapping x intervals. #> Warning: `position_dodge()` requires non-overlapping x intervals. #> Warning: `position_dodge()` requires non-overlapping x intervals. #> Warning: `position_dodge()` requires non-overlapping x intervals. #> Warning: `position_dodge()` requires non-overlapping x intervals. #> Warning: `position_dodge()` requires non-overlapping x intervals.  # }"},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_multicomponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — ggcoef_multicomponents","text":"","code":"ggcoef_multicomponents(   model,   type = c(\"dodged\", \"faceted\", \"table\"),   component_col = \"component\",   component_label = NULL,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   significance = 1 - conf.level,   significance_labels = NULL,   return_data = FALSE,   table_stat = c(\"estimate\", \"ci\", \"p.value\"),   table_header = NULL,   table_text_size = 3,   table_stat_label = NULL,   ci_pattern = \"{conf.low}, {conf.high}\",   table_witdhs = c(3, 2),   ... )  ggcoef_multinom(   model,   type = c(\"dodged\", \"faceted\", \"table\"),   y.level_label = NULL,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   tidy_args = NULL,   conf.int = TRUE,   conf.level = 0.95,   exponentiate = FALSE,   variable_labels = NULL,   term_labels = NULL,   interaction_sep = \" * \",   categorical_terms_pattern = \"{level}\",   add_reference_rows = TRUE,   no_reference_row = NULL,   intercept = FALSE,   include = dplyr::everything(),   significance = 1 - conf.level,   significance_labels = NULL,   return_data = FALSE,   table_stat = c(\"estimate\", \"ci\", \"p.value\"),   table_header = NULL,   table_text_size = 3,   table_stat_label = NULL,   ci_pattern = \"{conf.low}, {conf.high}\",   table_witdhs = c(3, 2),   ... )"},{"path":"https://larmarange.github.io/ggstats/reference/ggcoef_multicomponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — ggcoef_multicomponents","text":"model regression model object type dodged plot, faceted plot multiple table plots? component_col name component column component_label optional named vector labeling components tidy_fun (function) Option specify custom tidier function. tidy_args Additional arguments passed broom.helpers::tidy_plus_plus() tidy_fun conf.int (logical) confidence intervals computed? (see broom::tidy()) conf.level confidence level use confidence interval conf.int = TRUE; must strictly greater 0 less 1; defaults 0.95, corresponds 95 percent confidence interval exponentiate TRUE logarithmic scale used x-axis variable_labels (formula-list-selector) named list named vector custom variable labels. term_labels (list vector) named list named vector custom term labels. interaction_sep (string) Separator interaction terms. categorical_terms_pattern (glue pattern) glue pattern labels categorical terms treatment sum contrasts (see model_list_terms_levels()). add_reference_rows (logical) reference rows added? no_reference_row (tidy-select) Variables reference row added, add_reference_rows = TRUE. intercept (logical) intercept(s) included? include (tidy-select) Variables include. Default everything(). See also all_continuous(), all_categorical(), all_dichotomous() all_interaction(). significance level (0 1) coefficient consider significantly different 0 (1 exponentiate = TRUE), NULL highlighting coefficients significance_labels optional vector custom labels significance variable return_data TRUE, return data.frame used plotting instead plot table_stat statistics display table, use column name returned tidier \"ci\" confidence intervals formatted according ci_pattern table_header optional custom headers table table_text_size text size table table_stat_label optional named list labeller functions displayed statistic (see examples) ci_pattern glue pattern confidence intervals table table_witdhs use table_widths instead ... parameters passed ggcoef_plot() y.level_label optional named vector labeling y.level (see examples)","code":""},{"path":"https://larmarange.github.io/ggstats/reference/gglikert.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting Likert-type items — gglikert","title":"Plotting Likert-type items — gglikert","text":"Combines several factor variables using list ordered levels (e.g. Likert-type scales) unique data frame generates centered bar plot.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/gglikert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting Likert-type items — gglikert","text":"","code":"gglikert(   data,   include = dplyr::everything(),   weights = NULL,   y = \".question\",   variable_labels = NULL,   sort = c(\"none\", \"ascending\", \"descending\"),   sort_method = c(\"prop\", \"prop_lower\", \"mean\", \"median\"),   sort_prop_include_center = totals_include_center,   factor_to_sort = \".question\",   exclude_fill_values = NULL,   cutoff = NULL,   data_fun = NULL,   add_labels = TRUE,   labels_size = 3.5,   labels_color = \"auto\",   labels_accuracy = 1,   labels_hide_below = 0.05,   add_totals = TRUE,   totals_size = labels_size,   totals_color = \"black\",   totals_accuracy = labels_accuracy,   totals_fontface = \"bold\",   totals_include_center = FALSE,   totals_hjust = 0.1,   y_reverse = TRUE,   y_label_wrap = 50,   reverse_likert = FALSE,   width = 0.9,   facet_rows = NULL,   facet_cols = NULL,   facet_label_wrap = 50,   symmetric = FALSE )  gglikert_data(   data,   include = dplyr::everything(),   weights = NULL,   variable_labels = NULL,   sort = c(\"none\", \"ascending\", \"descending\"),   sort_method = c(\"prop\", \"prop_lower\", \"mean\", \"median\"),   sort_prop_include_center = TRUE,   factor_to_sort = \".question\",   exclude_fill_values = NULL,   cutoff = NULL,   data_fun = NULL )  gglikert_stacked(   data,   include = dplyr::everything(),   weights = NULL,   y = \".question\",   variable_labels = NULL,   sort = c(\"none\", \"ascending\", \"descending\"),   sort_method = c(\"prop\", \"prop_lower\", \"mean\", \"median\"),   sort_prop_include_center = FALSE,   factor_to_sort = \".question\",   data_fun = NULL,   add_labels = TRUE,   labels_size = 3.5,   labels_color = \"auto\",   labels_accuracy = 1,   labels_hide_below = 0.05,   add_median_line = FALSE,   y_reverse = TRUE,   y_label_wrap = 50,   reverse_fill = TRUE,   width = 0.9 )"},{"path":"https://larmarange.github.io/ggstats/reference/gglikert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting Likert-type items — gglikert","text":"data data frame include variables include, accepts tidy-select syntax weights optional variable name weighting variable, accepts tidy-select syntax y name variable plotted y axis (relevant .question mapped \"facets, see examples), accepts tidy-select syntax variable_labels named list named vector custom variable labels sort factor defined factor_to_sort sorted according answers (see sort_method)? One \"none\" (default), \"ascending\" \"descending\" sort_method method used sort variables: \"prop\" sort according proportion answers higher centered level, \"prop_lower\" according proportion lower centered level,  \"mean\" considers answer score sort according mean score, \"median\" used median majority judgment rule tie-breaking. sort_prop_include_center sorting \"prop\" number levels uneven, half central level taken account compute proportion? factor_to_sort name factor column sort sort equal \"none\"; default list questions passed include; one factor column tibble returned gglikert_data(); accepts tidy-select syntax exclude_fill_values Vector values displayed (still taken account computing proportions), see position_likert() cutoff number categories displayed negatively (.e. left x axis bottom y axis), decimal value: 2 display negatively two first categories, 2.5 display negatively two first categories half third, 2.2 display negatively two first categories fifth third (see examples). default (NULL), equal number categories divided 2, .e. centered. data_fun advanced usage, custom function applied generated dataset end gglikert_data() add_labels percentage labels added plot? labels_size size percentage labels labels_color color percentage labels (\"auto\" use hex_bw() determine font color based background color) labels_accuracy accuracy percentages, see scales::label_percent() labels_hide_below provided, values masked, see label_percent_abs() add_totals total proportions negative positive answers added plot? option compatible facets! totals_size size total proportions totals_color color total proportions totals_accuracy accuracy total proportions, see scales::label_percent() totals_fontface font face total proportions totals_include_center number levels uneven, half center level added total proportions? totals_hjust horizontal adjustment totals labels x axis y_reverse y axis reversed? y_label_wrap number characters per line y axis labels, see scales::label_wrap() reverse_likert TRUE, reverse default stacking order, see position_likert() width bar width, see ggplot2::geom_bar() facet_rows, facet_cols set variables expressions quoted ggplot2::vars() defining faceting groups rows columns dimension (see examples) facet_label_wrap number characters per line facet labels, see ggplot2::label_wrap_gen() symmetric x-axis symmetric? add_median_line add vertical line 50%? reverse_fill TRUE, reverse default stacking order, see ggplot2::position_fill()","code":""},{"path":"https://larmarange.github.io/ggstats/reference/gglikert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting Likert-type items — gglikert","text":"ggplot2 plot tibble.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/gglikert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting Likert-type items — gglikert","text":"use gglikert_data() just produce dataset plotted. variable labels defined (see labelled::var_label()), considered. can also pass custom variables labels variable_labels argument.","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/gglikert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting Likert-type items — gglikert","text":"","code":"library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  likert_levels <- c(   \"Strongly disagree\",   \"Disagree\",   \"Neither agree nor disagree\",   \"Agree\",   \"Strongly agree\" ) set.seed(42) df <-   tibble(     q1 = sample(likert_levels, 150, replace = TRUE),     q2 = sample(likert_levels, 150, replace = TRUE, prob = 5:1),     q3 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),     q4 = sample(likert_levels, 150, replace = TRUE, prob = 1:5),     q5 = sample(c(likert_levels, NA), 150, replace = TRUE),     q6 = sample(likert_levels, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))   ) |>   mutate(across(everything(), ~ factor(.x, levels = likert_levels)))  gglikert(df)   gglikert(df, include = q1:3) +   scale_fill_likert(pal = scales::brewer_pal(palette = \"PRGn\")) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale.   gglikert(df, sort = \"ascending\")   # \\donttest{ gglikert(df, sort = \"ascending\", sort_prop_include_center = TRUE)   gglikert(df, sort = \"ascending\", sort_method = \"mean\")   gglikert(df, reverse_likert = TRUE)   gglikert(df, add_totals = FALSE, add_labels = FALSE)   gglikert(   df,   totals_include_center = TRUE,   totals_hjust = .25,   totals_size = 4.5,   totals_fontface = \"italic\",   totals_accuracy = .01,   labels_accuracy = 1,   labels_size = 2.5,   labels_hide_below = .25 )   gglikert(df, exclude_fill_values = \"Neither agree nor disagree\")   if (require(\"labelled\")) {   df |>     set_variable_labels(       q1 = \"First question\",       q2 = \"Second question\"     ) |>     gglikert(       variable_labels = c(         q4 = \"a custom label\",         q6 = \"a very very very very very very very very very very long label\"       ),       y_label_wrap = 25     ) } #> Loading required package: labelled   # Facets df_group <- df df_group$group <- sample(c(\"A\", \"B\"), 150, replace = TRUE)  gglikert(df_group, q1:q6, facet_rows = vars(group))   gglikert(df_group, q1:q6, facet_cols = vars(group))   gglikert(df_group, q1:q6, y = \"group\", facet_rows = vars(.question))   # Custom function to be applied on data f <- function(d) {   d$.question <- forcats::fct_relevel(d$.question, \"q5\", \"q2\")   d } gglikert(df, include = q1:q6, data_fun = f)   # Custom center gglikert(df, cutoff = 2)   gglikert(df, cutoff = 1)   gglikert(df, cutoff = 1, symmetric = TRUE)   # } gglikert_stacked(df, q1:q6)   gglikert_stacked(df, q1:q6, add_median_line = TRUE, sort = \"asc\")   # \\donttest{ gglikert_stacked(df_group, q1:q6, y = \"group\", add_median_line = TRUE) +   facet_grid(rows = vars(.question))  # }"},{"path":"https://larmarange.github.io/ggstats/reference/ggstats-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggstats: Extension to 'ggplot2' for Plotting Stats — ggstats-package","title":"ggstats: Extension to 'ggplot2' for Plotting Stats — ggstats-package","text":"Provides new statistics, new geometries new positions 'ggplot2' suite functions facilitate creation statistical plots.","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/ggstats-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggstats: Extension to 'ggplot2' for Plotting Stats — ggstats-package","text":"Maintainer: Joseph Larmarange joseph@larmarange.net (ORCID)","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggsurvey.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy ggplot2 with survey objects — ggsurvey","title":"Easy ggplot2 with survey objects — ggsurvey","text":"function facilitate ggplot2 graphs using survey object. initiate ggplot map survey weights corresponding aesthetic.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggsurvey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy ggplot2 with survey objects — ggsurvey","text":"","code":"ggsurvey(design = NULL, mapping = NULL, ...)"},{"path":"https://larmarange.github.io/ggstats/reference/ggsurvey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy ggplot2 with survey objects — ggsurvey","text":"design survey design object, usually created survey::svydesign() mapping Default list aesthetic mappings use plot, created ggplot2::aes(). ... arguments passed methods. currently used.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggsurvey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy ggplot2 with survey objects — ggsurvey","text":"ggplot2 plot.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggsurvey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easy ggplot2 with survey objects — ggsurvey","text":"Graphs correct long weights required compute graph. However, statistic geometry requiring correct variance computation (like ggplot2::geom_smooth()) statistically incorrect.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/ggsurvey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easy ggplot2 with survey objects — ggsurvey","text":"","code":"data(api, package = \"survey\") dstrat <- survey::svydesign(   id = ~1, strata = ~stype,   weights = ~pw, data = apistrat,   fpc = ~fpc ) ggsurvey(dstrat) +   ggplot2::aes(x = cnum, y = dnum) +   ggplot2::geom_count()   d <- as.data.frame(Titanic) dw <- survey::svydesign(ids = ~1, weights = ~Freq, data = d) ggsurvey(dw) +   ggplot2::aes(x = Class, fill = Survived) +   ggplot2::geom_bar(position = \"fill\")"},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"use auto_contrast shortcut aes(colour = after_scale(hex_bw(.data$fill))). use !!! inject within ggplot2::aes() (see examples). hex_bw_threshold() variation hex_bw(). values threshold, black (\"#000000\") always returned, regardless hex_code.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"","code":"hex_bw(hex_code)  hex_bw_threshold(hex_code, values, threshold)  auto_contrast"},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"object class uneval length 1.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"Adapted saros hex_code() https://github.com/teunbrand/ggplot_tricks?tab=readme-ov-file#text-contrast auto_contrast.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"hex_code Background color hex-format. values Values compared. threshold Threshold.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"Either black white, hex-format","code":""},{"path":"https://larmarange.github.io/ggstats/reference/hex_bw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify a suitable font color (black or white) given a background HEX color — hex_bw","text":"","code":"hex_bw(\"#0dadfd\") #> [1] \"#000000\"  library(ggplot2) ggplot(diamonds) +   aes(x = cut, fill = color, label = after_stat(count)) +   geom_bar() +   geom_text(     mapping = aes(color = after_scale(hex_bw(.data$fill))),     position = position_stack(.5),     stat = \"count\",     size = 2   )   ggplot(diamonds) +   aes(x = cut, fill = color, label = after_stat(count)) +   geom_bar() +   geom_text(     mapping = auto_contrast,     position = position_stack(.5),     stat = \"count\",     size = 2   )   ggplot(diamonds) +   aes(x = cut, fill = color, label = after_stat(count), !!!auto_contrast) +   geom_bar() +   geom_text(     mapping = auto_contrast,     position = position_stack(.5),     stat = \"count\",     size = 2   )"},{"path":"https://larmarange.github.io/ggstats/reference/label_number_abs.html","id":null,"dir":"Reference","previous_headings":"","what":"Label absolute values — label_number_abs","title":"Label absolute values — label_number_abs","text":"Label absolute values","code":""},{"path":"https://larmarange.github.io/ggstats/reference/label_number_abs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label absolute values — label_number_abs","text":"","code":"label_number_abs(..., hide_below = NULL)  label_percent_abs(..., hide_below = NULL)"},{"path":"https://larmarange.github.io/ggstats/reference/label_number_abs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label absolute values — label_number_abs","text":"... arguments passed scales::label_number() scales::label_percent() hide_below provided, values hide_below masked (.e. empty string \"\" returned)","code":""},{"path":"https://larmarange.github.io/ggstats/reference/label_number_abs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label absolute values — label_number_abs","text":"\"labelling\" function, , .e. function takes vector returns character vector length giving label input value.","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/label_number_abs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label absolute values — label_number_abs","text":"","code":"x <- c(-0.2, -.05, 0, .07, .25, .66)  scales::label_number()(x) #> [1] \"-0.20\" \"-0.05\" \"0.00\"  \"0.07\"  \"0.25\"  \"0.66\"  label_number_abs()(x) #> [1] \"0.20\" \"0.05\" \"0.00\" \"0.07\" \"0.25\" \"0.66\"  scales::label_percent()(x) #> [1] \"-20%\" \"-5%\"  \"0%\"   \"7%\"   \"25%\"  \"66%\"  label_percent_abs()(x) #> [1] \"20%\" \"5%\"  \"0%\"  \"7%\"  \"25%\" \"66%\" label_percent_abs(hide_below = .1)(x) #> [1] \"20%\" \"\"    \"\"    \"\"    \"25%\" \"66%\""},{"path":"https://larmarange.github.io/ggstats/reference/pal_extender.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a discrete colour palette — pal_extender","title":"Extend a discrete colour palette — pal_extender","text":"palette returns less colours requested, list colours expanded using scales::pal_gradient_n(). used sequential diverging palette. relevant qualitative palettes.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/pal_extender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a discrete colour palette — pal_extender","text":"","code":"pal_extender(pal = scales::brewer_pal(palette = \"BrBG\"))  scale_fill_extended(   name = waiver(),   ...,   pal = scales::brewer_pal(palette = \"BrBG\"),   aesthetics = \"fill\" )  scale_colour_extended(   name = waiver(),   ...,   pal = scales::brewer_pal(palette = \"BrBG\"),   aesthetics = \"colour\" )"},{"path":"https://larmarange.github.io/ggstats/reference/pal_extender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a discrete colour palette — pal_extender","text":"pal palette function, returned scales::brewer_pal, taking number colours entry returning list colours. name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. ... arguments passed discrete_scale() control name, limits, breaks, labels forth. aesthetics Character string vector character strings listing name(s) aesthetic(s) scale works . can useful, example, apply colour settings colour fill aesthetics time, via aesthetics = c(\"colour\", \"fill\").","code":""},{"path":"https://larmarange.github.io/ggstats/reference/pal_extender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a discrete colour palette — pal_extender","text":"palette function.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/pal_extender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend a discrete colour palette — pal_extender","text":"","code":"pal <- scales::pal_brewer(palette = \"PiYG\") scales::show_col(pal(16)) #> Warning: n too large, allowed maximum for palette PiYG is 11 #> Returning the palette you asked for with that many colors  scales::show_col(pal_extender(pal)(16))"},{"path":"https://larmarange.github.io/ggstats/reference/position_likert.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack objects on top of each another and center them around 0 — position_likert","title":"Stack objects on top of each another and center them around 0 — position_likert","text":"position_diverging() stacks bars top center around zero (number categories displayed side). position_likert() uses proportions instead counts. type presentation commonly used display Likert-type scales.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/position_likert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack objects on top of each another and center them around 0 — position_likert","text":"","code":"position_likert(   vjust = 1,   reverse = FALSE,   exclude_fill_values = NULL,   cutoff = NULL )  position_diverging(   vjust = 1,   reverse = FALSE,   exclude_fill_values = NULL,   cutoff = NULL )"},{"path":"https://larmarange.github.io/ggstats/reference/position_likert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack objects on top of each another and center them around 0 — position_likert","text":"vjust Vertical adjustment geoms position (like points lines), dimension (like bars areas). Set 0 align bottom, 0.5 middle, 1 (default) top. reverse TRUE, reverse default stacking order. useful rotating plot legend. exclude_fill_values Vector values variable associated fill aesthetic displayed (still taken account computing proportions) cutoff number categories displayed negatively (.e. left x axis bottom y axis), decimal value: 2 display negatively two first categories, 2.5 display negatively two first categories half third, 2.2 display negatively two first categories fifth third (see examples). default (NULL), equal number categories divided 2, .e. centered.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/position_likert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stack objects on top of each another and center them around 0 — position_likert","text":"recommended use position_likert() stat_prop() complete argument (see examples).","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/position_likert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack objects on top of each another and center them around 0 — position_likert","text":"","code":"library(ggplot2)  ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"fill\") +   scale_x_continuous(label = scales::label_percent()) +   xlab(\"proportion\")   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"likert\") +   scale_x_continuous(label = label_percent_abs()) +   scale_fill_likert() +   xlab(\"proportion\")   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"stack\") +   scale_fill_likert(pal = scales::brewer_pal(palette = \"PiYG\"))   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"diverging\") +   scale_x_continuous(label = label_number_abs()) +   scale_fill_likert()   # \\donttest{ # Reverse order -------------------------------------------------------------  ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = position_likert(reverse = TRUE)) +   scale_x_continuous(label = label_percent_abs()) +   scale_fill_likert() +   xlab(\"proportion\")   # Custom center -------------------------------------------------------------  ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = position_likert(cutoff = 1)) +   scale_x_continuous(label = label_percent_abs()) +   scale_fill_likert(cutoff = 1) +   xlab(\"proportion\")   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = position_likert(cutoff = 3.75)) +   scale_x_continuous(label = label_percent_abs()) +   scale_fill_likert(cutoff = 3.75) +   xlab(\"proportion\")   # Missing items ------------------------------------------------------------- # example with a level not being observed for a specific value of y d <- diamonds d <- d[!(d$cut == \"Premium\" & d$clarity == \"I1\"), ] d <- d[!(d$cut %in% c(\"Fair\", \"Good\") & d$clarity == \"SI2\"), ]  # by default, the two lowest bar are not properly centered ggplot(d) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"likert\") +   scale_fill_likert()   # use stat_prop() with `complete = \"fill\"` to fix it ggplot(d) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"likert\", stat = \"prop\", complete = \"fill\") +   scale_fill_likert()   # Add labels ----------------------------------------------------------------  custom_label <- function(x) {   p <- scales::percent(x, accuracy = 1)   p[x < .075] <- \"\"   p }  ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"likert\") +   geom_text(     aes(by = clarity, label = custom_label(after_stat(prop))),     stat = \"prop\",     position = position_likert(vjust = .5)   ) +   scale_x_continuous(label = label_percent_abs()) +   scale_fill_likert() +   xlab(\"proportion\")   # Do not display specific fill values --------------------------------------- # (but taken into account to compute proportions)  ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = position_likert(exclude_fill_values = \"Very Good\")) +   scale_x_continuous(label = label_percent_abs()) +   scale_fill_likert() +   xlab(\"proportion\")  # }"},{"path":"https://larmarange.github.io/ggstats/reference/round_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to multiple of any number. — round_any","title":"Round to multiple of any number. — round_any","text":"Round multiple number.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/round_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to multiple of any number. — round_any","text":"","code":"round_any(x, accuracy, f = round)"},{"path":"https://larmarange.github.io/ggstats/reference/round_any.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Round to multiple of any number. — round_any","text":"adapted plyr","code":""},{"path":"https://larmarange.github.io/ggstats/reference/round_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to multiple of any number. — round_any","text":"x numeric date-time (POSIXct) vector round accuracy number round ; POSIXct objects, number seconds f rounding function: floor, ceiling round","code":""},{"path":"https://larmarange.github.io/ggstats/reference/round_any.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to multiple of any number. — round_any","text":"","code":"round_any(1.865, accuracy = .25) #> [1] 1.75"},{"path":"https://larmarange.github.io/ggstats/reference/scale_fill_likert.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour scale for Likert-type plots — scale_fill_likert","title":"Colour scale for Likert-type plots — scale_fill_likert","text":"scale similar diverging discrete colour scales, allows change \"center\" scale using cutoff argument, used position_likert().","code":""},{"path":"https://larmarange.github.io/ggstats/reference/scale_fill_likert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour scale for Likert-type plots — scale_fill_likert","text":"","code":"scale_fill_likert(   name = waiver(),   ...,   pal = scales::brewer_pal(palette = \"BrBG\"),   cutoff = NULL,   aesthetics = \"fill\" )  likert_pal(pal = scales::brewer_pal(palette = \"BrBG\"), cutoff = NULL)"},{"path":"https://larmarange.github.io/ggstats/reference/scale_fill_likert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour scale for Likert-type plots — scale_fill_likert","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. ... arguments passed discrete_scale() control name, limits, breaks, labels forth. pal palette function taking number colours entry returning list colours (see examples), ideally diverging palette cutoff Number categories displayed negatively (see position_likert()) therefore changing center colour scale (see examples). aesthetics Character string vector character strings listing name(s) aesthetic(s) scale works . can useful, example, apply colour settings colour fill aesthetics time, via aesthetics = c(\"colour\", \"fill\").","code":""},{"path":"https://larmarange.github.io/ggstats/reference/scale_fill_likert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour scale for Likert-type plots — scale_fill_likert","text":"","code":"library(ggplot2) ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"likert\") +   scale_x_continuous(label = label_percent_abs()) +   xlab(\"proportion\")   ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = \"likert\") +   scale_x_continuous(label = label_percent_abs()) +   xlab(\"proportion\") +   scale_fill_likert()    ggplot(diamonds) +   aes(y = clarity, fill = cut) +   geom_bar(position = position_likert(cutoff = 1)) +   scale_x_continuous(label = label_percent_abs()) +   xlab(\"proportion\") +   scale_fill_likert(cutoff = 1)"},{"path":"https://larmarange.github.io/ggstats/reference/signif_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Significance Stars — signif_stars","title":"Significance Stars — signif_stars","text":"Calculate significance stars","code":""},{"path":"https://larmarange.github.io/ggstats/reference/signif_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Significance Stars — signif_stars","text":"","code":"signif_stars(x, three = 0.001, two = 0.01, one = 0.05, point = 0.1)"},{"path":"https://larmarange.github.io/ggstats/reference/signif_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Significance Stars — signif_stars","text":"x numeric values compared point, one, two, three values three threshold display three stars two threshold display two stars one threshold display one star point threshold display one point (NULL deactivate)","code":""},{"path":"https://larmarange.github.io/ggstats/reference/signif_stars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Significance Stars — signif_stars","text":"Character vector containing appropriate number stars x value.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/signif_stars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Significance Stars — signif_stars","text":"Joseph Larmarange","code":""},{"path":"https://larmarange.github.io/ggstats/reference/signif_stars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Significance Stars — signif_stars","text":"","code":"x <- c(0.5, 0.1, 0.05, 0.01, 0.001) signif_stars(x) #> [1] \"\"    \".\"   \"*\"   \"**\"  \"***\" signif_stars(x, one = .15, point = NULL) #> [1] \"\"    \"*\"   \"*\"   \"**\"  \"***\""},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cross-tabulation statistics — stat_cross","title":"Compute cross-tabulation statistics — stat_cross","text":"Computes statistics 2-dimensional matrix using broom::augment.htest.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cross-tabulation statistics — stat_cross","text":"","code":"stat_cross(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   keep.zero.cells = FALSE )"},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cross-tabulation statistics — stat_cross","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom Override default connection ggplot2::geom_point(). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm TRUE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). keep.zero.cells TRUE, cells observations kept.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute cross-tabulation statistics — stat_cross","text":"ggplot2 plot added statistic.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Compute cross-tabulation statistics — stat_cross","text":"stat_cross() requires x y aesthetics.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Compute cross-tabulation statistics — stat_cross","text":"observed number observations x,y prop proportion total row.prop row proportion col.prop column proportion expected expected count null hypothesis resid Pearson's residual std.resid standardized residual row.observed total number observations within row col.observed total number observations within column total.observed total number observations within table phi phi coefficients, see augment_chisq_add_phi()","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/stat_cross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute cross-tabulation statistics — stat_cross","text":"","code":"library(ggplot2) d <- as.data.frame(Titanic)  # plot number of observations ggplot(d) +   aes(x = Class, y = Survived, weight = Freq, size = after_stat(observed)) +   stat_cross() +   scale_size_area(max_size = 20)   # custom shape and fill colour based on chi-squared residuals ggplot(d) +   aes(     x = Class, y = Survived, weight = Freq,     size = after_stat(observed), fill = after_stat(std.resid)   ) +   stat_cross(shape = 22) +   scale_fill_steps2(breaks = c(-3, -2, 2, 3), show.limits = TRUE) +   scale_size_area(max_size = 20)   # \\donttest{ # custom shape and fill colour based on phi coeffients ggplot(d) +   aes(     x = Class, y = Survived, weight = Freq,     size = after_stat(observed), fill = after_stat(phi)   ) +   stat_cross(shape = 22) +   scale_fill_steps2(show.limits = TRUE) +   scale_size_area(max_size = 20)    # plotting the number of observations as a table ggplot(d) +   aes(     x = Class, y = Survived, weight = Freq, label = after_stat(observed)   ) +   geom_text(stat = \"cross\")   # Row proportions with standardized residuals ggplot(d) +   aes(     x = Class, y = Survived, weight = Freq,     label = scales::percent(after_stat(row.prop)),     size = NULL, fill = after_stat(std.resid)   ) +   stat_cross(shape = 22, size = 30) +   geom_text(stat = \"cross\") +   scale_fill_steps2(breaks = c(-3, -2, 2, 3), show.limits = TRUE) +   facet_grid(Sex ~ .) +   labs(fill = \"Standardized residuals\") +   theme_minimal()  # }"},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute proportions according to custom denominator — stat_prop","title":"Compute proportions according to custom denominator — stat_prop","text":"stat_prop() variation ggplot2::stat_count() allowing compute custom proportions according aesthetic defining denominator (.e. proportions value sum 1). aesthetic specified, denominators determined according default_by argument.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute proportions according to custom denominator — stat_prop","text":"","code":"stat_prop(   mapping = NULL,   data = NULL,   geom = \"bar\",   position = \"fill\",   ...,   width = NULL,   na.rm = FALSE,   orientation = NA,   show.legend = NA,   inherit.aes = TRUE,   complete = NULL,   default_by = \"total\" )"},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute proportions according to custom denominator — stat_prop","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom Override default connection ggplot2::geom_bar(). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. width Bar width. default, set 90% resolution() data. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). complete Name (character) aesthetic statistics completed unobserved values (see example). default_by aesthetic available, name another aesthetic used determine denominators (e.g. \"fill\"), NULL \"total\" compute proportions total. noted, default_by = \"x\" works vertical horizontal bars.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute proportions according to custom denominator — stat_prop","text":"ggplot2 plot added statistic.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Compute proportions according to custom denominator — stat_prop","text":"stat_prop() understands following aesthetics (required aesthetics bold): x y weight","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Compute proportions according to custom denominator — stat_prop","text":"after_stat(count) number points bin after_stat(denominator) denominator proportions after_stat(prop) computed proportion, .e. after_stat(count)/after_stat(denominator)","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/stat_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute proportions according to custom denominator — stat_prop","text":"","code":"library(ggplot2) d <- as.data.frame(Titanic)  p <- ggplot(d) +   aes(x = Class, fill = Survived, weight = Freq, by = Class) +   geom_bar(position = \"fill\") +   geom_text(stat = \"prop\", position = position_fill(.5)) p  p + facet_grid(~Sex)   ggplot(d) +   aes(x = Class, fill = Survived, weight = Freq) +   geom_bar(position = \"dodge\") +   geom_text(     aes(by = Survived),     stat = \"prop\",     position = position_dodge(0.9), vjust = \"bottom\"   )  # \\donttest{ if (requireNamespace(\"scales\")) {   ggplot(d) +     aes(x = Class, fill = Survived, weight = Freq, by = 1) +     geom_bar() +     geom_text(       aes(label = scales::percent(after_stat(prop), accuracy = 1)),       stat = \"prop\",       position = position_stack(.5)     ) }   # displaying unobserved levels with complete d <- diamonds |>   dplyr::filter(!(cut == \"Ideal\" & clarity == \"I1\")) |>   dplyr::filter(!(cut == \"Very Good\" & clarity == \"VS2\")) |>   dplyr::filter(!(cut == \"Premium\" & clarity == \"IF\")) p <- ggplot(d) +   aes(x = clarity, fill = cut, by = clarity) +   geom_bar(position = \"fill\") p + geom_text(stat = \"prop\", position = position_fill(.5))  p + geom_text(stat = \"prop\", position = position_fill(.5), complete = \"fill\")  # }"},{"path":"https://larmarange.github.io/ggstats/reference/stat_weighted_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted y mean — stat_weighted_mean","title":"Compute weighted y mean — stat_weighted_mean","text":"statistic compute mean y aesthetic unique value x, taking account weight aesthetic provided.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_weighted_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted y mean — stat_weighted_mean","text":"","code":"stat_weighted_mean(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   na.rm = FALSE,   orientation = NA,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://larmarange.github.io/ggstats/reference/stat_weighted_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted y mean — stat_weighted_mean","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom Override default connection ggplot2::geom_point(). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_weighted_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute weighted y mean — stat_weighted_mean","text":"ggplot2 plot added statistic.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/stat_weighted_mean.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Compute weighted y mean — stat_weighted_mean","text":"y weighted y (numerator / denominator) numerator numerator denominator denominator","code":""},{"path":[]},{"path":"https://larmarange.github.io/ggstats/reference/stat_weighted_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute weighted y mean — stat_weighted_mean","text":"","code":"library(ggplot2)  data(tips, package = \"reshape\")  ggplot(tips) +   aes(x = day, y = total_bill) +   geom_point()   ggplot(tips) +   aes(x = day, y = total_bill) +   stat_weighted_mean()   # \\donttest{ ggplot(tips) +   aes(x = day, y = total_bill, group = 1) +   stat_weighted_mean(geom = \"line\")   ggplot(tips) +   aes(x = day, y = total_bill, colour = sex, group = sex) +   stat_weighted_mean(geom = \"line\")   ggplot(tips) +   aes(x = day, y = total_bill, fill = sex) +   stat_weighted_mean(geom = \"bar\", position = \"dodge\")   # computing a proportion on the fly if (requireNamespace(\"scales\")) {   ggplot(tips) +     aes(x = day, y = as.integer(smoker == \"Yes\"), fill = sex) +     stat_weighted_mean(geom = \"bar\", position = \"dodge\") +     scale_y_continuous(labels = scales::percent) }  # } library(ggplot2)  # taking into account some weights d <- as.data.frame(Titanic) ggplot(d) +   aes(     x = Class, y = as.integer(Survived == \"Yes\"),     weight = Freq, fill = Sex   ) +   geom_bar(stat = \"weighted_mean\", position = \"dodge\") +   scale_y_continuous(labels = scales::percent) +   labs(y = \"Survived\")"},{"path":"https://larmarange.github.io/ggstats/reference/symmetric_limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetric limits — symmetric_limits","title":"Symmetric limits — symmetric_limits","text":"Expand scale limits make symmetric around zero. Can passed argument parameter limits continuous scales packages {ggplot2} {scales}. Can also used obtain enclosing symmetric range numeric vectors.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/symmetric_limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetric limits — symmetric_limits","text":"","code":"symmetric_limits(x)"},{"path":"https://larmarange.github.io/ggstats/reference/symmetric_limits.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Symmetric limits — symmetric_limits","text":"Adapted homonym function {ggpmisc}","code":""},{"path":"https://larmarange.github.io/ggstats/reference/symmetric_limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetric limits — symmetric_limits","text":"x vector numeric values, possibly range, compute enclosing range","code":""},{"path":"https://larmarange.github.io/ggstats/reference/symmetric_limits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symmetric limits — symmetric_limits","text":"numeric vector length two new limits, always absolute value upper lower limits .","code":""},{"path":"https://larmarange.github.io/ggstats/reference/symmetric_limits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symmetric limits — symmetric_limits","text":"","code":"library(ggplot2)  ggplot(iris) +   aes(x = Sepal.Length - 5, y = Sepal.Width - 3, colour = Species) +   geom_vline(xintercept = 0) +   geom_hline(yintercept = 0) +   geom_point()   last_plot() +   scale_x_continuous(limits = symmetric_limits) +   scale_y_continuous(limits = symmetric_limits)"},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Median and Quantiles — weighted.median","title":"Weighted Median and Quantiles — weighted.median","text":"Compute median quantiles set numbers weights associated .","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Median and Quantiles — weighted.median","text":"","code":"weighted.median(x, w, na.rm = TRUE, type = 2)  weighted.quantile(x, w, probs = seq(0, 1, 0.25), na.rm = TRUE, type = 4)"},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Weighted Median and Quantiles — weighted.median","text":"functions adapted homonyms developed Adrian Baddeley spatstat package.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Median and Quantiles — weighted.median","text":"x numeric vector values w numeric vector weights na.rm logical indicating whether ignore NA values type Integer specifying rule calculating median quantile, corresponding rules available stats:quantile(). valid choices type=1, 2 4. See Details. probs probabilities quantiles computed, numeric vector values 0 1","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Median and Quantiles — weighted.median","text":"numeric vector.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted Median and Quantiles — weighted.median","text":"ith observation x[] treated weight proportional w[]. weighted median value m total weight data less equal m equal half total weight. generally, weighted quantile probability p value q total weight data less equal q equal p times total weight. value, type = 1, next largest value returned (right-continuous inverse left-continuous cumulative distribution function); type = 2, average two surrounding values returned (average right-continuous left-continuous inverses); type = 4, linear interpolation performed. Note default rule weighted.median() type = 2, consistent traditional definition median, default weighted.quantile() type = 4.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Median and Quantiles — weighted.median","text":"","code":"x <- 1:20 w <- runif(20) weighted.median(x, w) #> [1] 11.5 weighted.quantile(x, w) #>        0%       25%       50%       75%      100%  #>  1.000000  5.888026 11.795509 14.939129 20.000000"},{"path":"https://larmarange.github.io/ggstats/reference/weighted.sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Sum — weighted.sum","title":"Weighted Sum — weighted.sum","text":"Weighted Sum","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Sum — weighted.sum","text":"","code":"weighted.sum(x, w, na.rm = TRUE)"},{"path":"https://larmarange.github.io/ggstats/reference/weighted.sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Sum — weighted.sum","text":"x numeric vector values w numeric vector weights na.rm logical indicating whether ignore NA values","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Sum — weighted.sum","text":"numeric vector.","code":""},{"path":"https://larmarange.github.io/ggstats/reference/weighted.sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Sum — weighted.sum","text":"","code":"x <- 1:20 w <- runif(20) weighted.sum(x, w) #> [1] 115.7631"},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-0100","dir":"Changelog","previous_headings":"","what":"ggstats 0.10.0","title":"ggstats 0.10.0","text":"CRAN release: 2025-07-02 Improvements gglikert(): legend order reversed reverse_likert = TRUE (#95) gglikert_stacked(): legend order reversed reverse_fill = TRUE (#95) Renamed argument table_witdhs argument ggcoef_table() deprecated. Please use table_widths argument instead (#99)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-090","dir":"Changelog","previous_headings":"","what":"ggstats 0.9.0","title":"ggstats 0.9.0","text":"CRAN release: 2025-03-10 Improvements ggccoef_model() ggcoef_table() now compatible multinomial multi-component models, following broom.helpers 1.20.0: functions gained new arguments group_by group_labels (#93) new functions ggcoef_dodged() ggcoef_faceted() (#93) ggcoef_plot() got new argument y_labeller (#86) Deprecated functions ggcoef_multinom() ggcoef_multicomponents() now soft-deprecated may removed future release. Use instead ggcoef_model(), ggcoef_table(), ggcoef_dodged() ggcoef_faceted() (#93) Bug fix fix terms order ggcoef_model() specific cases two modalities two different variables name (#86) bug fix stat_prop() complete = \"color\" complete = \"group\"(#89) bug fix gglikert() reverse_likert = TRUE add_totals = TRUE (#91)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-080","dir":"Changelog","previous_headings":"","what":"ggstats 0.8.0","title":"ggstats 0.8.0","text":"CRAN release: 2025-01-07 Breaking changes geom_diverging(), geom_likert(), geom_pyramid(), geom_diverging_text(), geom_likert_text(), geom_pyramid_text() redesigned (#73) stat_prop(): arguments height, labels labeller removed (#73) Improvements new geoms geom_connector(), geom_bar_connector() geom_prop_connector() (#81) new shortcut auto_contrast (#75)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-070","dir":"Changelog","previous_headings":"","what":"ggstats 0.7.0","title":"ggstats 0.7.0","text":"CRAN release: 2024-09-22 Minor breaking change position_likert_count() renamed position_diverging() (#69) R minimum version 4.2.0 now required. Improvements new experimental plot: ggcascade() “cascade” plots (#71) new scale scale_fill_likert() (#64) new geometries: geom_prop_bar() geom_prop_text() (#69) new geometries: geom_diverging(), geom_likert(), geom_pyramid() geom_diverging_text(), geom_likert_text(), geom_pyramid_text() (#69) new helper symmetric_limits() make scale symmetric (#66) new helper pal_extender() corresponding scale_fill_extender() scale_colour_extender() new helper weighted.sum() weighted sums (#71) new sorting option \"prop_lower\" gglikert() (#62) new argument symmetric gglikert() (#66) new arguments default_by, height, labels labeller stat_prop() (#69) new returned statistics stat_prop(): after_stat(denominator), after_stat(height) after_stat(labels)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-060","dir":"Changelog","previous_headings":"","what":"ggstats 0.6.0","title":"ggstats 0.6.0","text":"CRAN release: 2024-04-05 Improvements new function hex_bw() identify suitable font color given background color (#57) new default value \"auto\" labels_color argument gglikert() gglikert_stacked() (using hex_bw()) (#57) new argument data_fun gglikert(), gglikert_data() gglikert_stacked() (#60)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-051","dir":"Changelog","previous_headings":"","what":"ggstats 0.5.1","title":"ggstats 0.5.1","text":"CRAN release: 2023-11-21 Bug fixes fix ggcoef_model() similar functions: Unicode character removed significance labels (#49)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-050","dir":"Changelog","previous_headings":"","what":"ggstats 0.5.0","title":"ggstats 0.5.0","text":"CRAN release: 2023-09-28 Improvements new options labels_color totals_color gglikert() gglikert_stacked() (#43) Bug fixes fix ggcoef_multicomponents() type = \"table\" exponentiate = TRUE fix gglikert(): function called directly ggstats::gglikert() without requiring full package loaded (#47)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-040","dir":"Changelog","previous_headings":"","what":"ggstats 0.4.0","title":"ggstats 0.4.0","text":"CRAN release: 2023-08-13 New features new function ggcoef_table() displaying coefficient table right forest plot (#32) new function ggcoef_multicomponents() multi-components models zero-inflated Poisson beta regressions (#38) new type \"table\" ggcoef_multinom() Improvements gglikert() now aligns total proportions faceting (#28) new weights argument gglikert(), gglikert_stacked() gglikert_data() (#29) new y argument gglikert() gglikert_stacked() (#31) new facet_label_wrap argument gglikert() (#31) New helpers weighted.median() weighted.quantile() functions","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-030","dir":"Changelog","previous_headings":"","what":"ggstats 0.3.0","title":"ggstats 0.3.0","text":"CRAN release: 2023-04-12 New features New functions gglikert(), gglikert_stacked() gglikert_data() (#25) New positions position_likert() position_likert_count() (#25) New complete argument stat_prop() (#25) Bug fixes Bug fix ggcoef_compare() preserve order model terms avoid error add_reference_rows = FALSE (#23)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-021","dir":"Changelog","previous_headings":"","what":"ggstats 0.2.1","title":"ggstats 0.2.1","text":"CRAN release: 2023-01-12 Bug fix geom_stripped_rows() geom_stripped_cols() (#20)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-020","dir":"Changelog","previous_headings":"","what":"ggstats 0.2.0","title":"ggstats 0.2.0","text":"CRAN release: 2023-01-06 Support pairwise contrasts (#14) New argument tidy_args ggcoef_*() pass additional arguments broom.helpers::tidy_plus_plus() tidy_fun (#17) Now requires ggplot2 version 3.4.0 (#15) Following change geom_rect(), size aesthetic now deprecated geom_stripped_cols() geom_stripped_rows(): please use linewidth aesthetic instead (#15)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-011","dir":"Changelog","previous_headings":"","what":"ggstats 0.1.1","title":"ggstats 0.1.1","text":"CRAN release: 2022-11-23 Examples relying Internet resources removed (#11)","code":""},{"path":"https://larmarange.github.io/ggstats/news/index.html","id":"ggstats-010","dir":"Changelog","previous_headings":"","what":"ggstats 0.1.0","title":"ggstats 0.1.0","text":"CRAN release: 2022-10-17 First version, based dev version GGally Fix ggcoef_multinom() display y levels listed y.level_label stat_cross() now returns phi coefficients (see also augment_chisq_add_phi()) (#6)","code":""}]
